# WARNING: DO NOT EDIT THIS FILE!!!
#
# This file is autogenerated from .github/workflows/ci-cd-build-packages.yml.erb
# by ./internal-scripts/generate-ci-cd-yaml.rb.
# Please edit the .erb file instead, then regenerate YAML
# by running that script.
#
# TIP: run this on your development machine to ensure generate-ci-cd-yaml.rb
# is run automatically as a Git pre-commit hook:
#
#   git config core.hooksPath .githooks

name: 'CI/CD: build packages [2]'

on:
  workflow_call:
    inputs:
      ci_artifacts_run_number:
        required: true
        type: string
      necessary_jobs:
        required: true
        type: string

env:
  CI_ARTIFACTS_RUN_NUMBER: ${{ inputs.ci_artifacts_run_number }}
  CACHE_CONTAINER: server-edition-ci-cache

jobs:
  ### Jemalloc ###



  build_jemalloc_debian_11_amd64:
    name: 'Jemalloc [debian-11/amd64]'
    if: contains(inputs.necessary_jobs, ';Build Jemalloc [debian-11/amd64];')
    runs-on: ubuntu-24.04
    environment: test
    permissions:
      id-token: write
      packages: read
    steps:
      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - run: mkdir cache

      - name: Download source
        run: ./internal-scripts/ci-cd/build-jemalloc-binaries/download-source.sh
        env:
          JEMALLOC_VERSION: "3.6.0"

      - name: Build
        run: ./internal-scripts/ci-cd/build-jemalloc-binaries/build.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          CACHE_KEY_PREFIX: "sccache/debian-11/amd64"

      - name: Archive artifact
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: 'jemalloc-bin-debian-11-amd64'
          ARTIFACT_PATH: output
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
  build_jemalloc_debian_11_arm64:
    name: 'Jemalloc [debian-11/arm64]'
    if: contains(inputs.necessary_jobs, ';Build Jemalloc [debian-11/arm64];')
    runs-on: ubuntu-24.04-arm
    environment: test
    permissions:
      id-token: write
      packages: read
    steps:
      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - run: mkdir cache

      - name: Download source
        run: ./internal-scripts/ci-cd/build-jemalloc-binaries/download-source.sh
        env:
          JEMALLOC_VERSION: "3.6.0"

      - name: Build
        run: ./internal-scripts/ci-cd/build-jemalloc-binaries/build.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          CACHE_KEY_PREFIX: "sccache/debian-11/arm64"

      - name: Archive artifact
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: 'jemalloc-bin-debian-11-arm64'
          ARTIFACT_PATH: output
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_jemalloc_ubuntu_22_04_amd64:
    name: 'Jemalloc [ubuntu-22.04/amd64]'
    if: contains(inputs.necessary_jobs, ';Build Jemalloc [ubuntu-22.04/amd64];')
    runs-on: ubuntu-24.04
    environment: test
    permissions:
      id-token: write
      packages: read
    steps:
      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - run: mkdir cache

      - name: Download source
        run: ./internal-scripts/ci-cd/build-jemalloc-binaries/download-source.sh
        env:
          JEMALLOC_VERSION: "3.6.0"

      - name: Build
        run: ./internal-scripts/ci-cd/build-jemalloc-binaries/build.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/amd64"

      - name: Archive artifact
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: 'jemalloc-bin-ubuntu-22.04-amd64'
          ARTIFACT_PATH: output
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
  build_jemalloc_ubuntu_22_04_arm64:
    name: 'Jemalloc [ubuntu-22.04/arm64]'
    if: contains(inputs.necessary_jobs, ';Build Jemalloc [ubuntu-22.04/arm64];')
    runs-on: ubuntu-24.04-arm
    environment: test
    permissions:
      id-token: write
      packages: read
    steps:
      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - run: mkdir cache

      - name: Download source
        run: ./internal-scripts/ci-cd/build-jemalloc-binaries/download-source.sh
        env:
          JEMALLOC_VERSION: "3.6.0"

      - name: Build
        run: ./internal-scripts/ci-cd/build-jemalloc-binaries/build.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/arm64"

      - name: Archive artifact
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: 'jemalloc-bin-ubuntu-22.04-arm64'
          ARTIFACT_PATH: output
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}


  ### Ruby ###



  build_ruby_debian_11-3_4-normal_amd64:
    name: 'Ruby [debian-11/3.4/normal/amd64]'

    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.4/normal/amd64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.4.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "normal"
          RUBY_PACKAGE_VERSION_ID: "3.4"
          CACHE_KEY_PREFIX: "sccache/debian-11/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "normal"
          VARIANT_PACKAGE_SUFFIX: ""
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.4"
          RUBY_PACKAGE_REVISION: "6"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.4_debian-11_normal_amd64"
          ARTIFACT_PATH: output-normal
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_4-normal_arm64:
    name: 'Ruby [debian-11/3.4/normal/arm64]'

    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.4/normal/arm64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.4.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "normal"
          RUBY_PACKAGE_VERSION_ID: "3.4"
          CACHE_KEY_PREFIX: "sccache/debian-11/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "normal"
          VARIANT_PACKAGE_SUFFIX: ""
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.4"
          RUBY_PACKAGE_REVISION: "6"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.4_debian-11_normal_arm64"
          ARTIFACT_PATH: output-normal
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_4-jemalloc_amd64:
    name: 'Ruby [debian-11/3.4/jemalloc/amd64]'

    needs: build_jemalloc_debian_11_amd64
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.4/jemalloc/amd64];')
      && !failure() && !cancelled()
    steps:
      - name: Check whether 'Build Jemalloc [debian-11/amd64]' did not fail
        run: 'false'
        if: |
          needs.build_jemalloc_debian_11_amd64.result == 'skipped'
          && contains(inputs.necessary_jobs, ';Build Jemalloc [debian-11/amd64];')

      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.4.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst

      - name: Fetch Jemalloc binary
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: jemalloc-bin-debian-11-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "jemalloc"
          RUBY_PACKAGE_VERSION_ID: "3.4"
          CACHE_KEY_PREFIX: "sccache/debian-11/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "jemalloc"
          VARIANT_PACKAGE_SUFFIX: "-jemalloc"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.4"
          RUBY_PACKAGE_REVISION: "6"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.4_debian-11_jemalloc_amd64"
          ARTIFACT_PATH: output-jemalloc
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_4-jemalloc_arm64:
    name: 'Ruby [debian-11/3.4/jemalloc/arm64]'

    needs: build_jemalloc_debian_11_arm64
    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.4/jemalloc/arm64];')
      && !failure() && !cancelled()
    steps:
      - name: Check whether 'Build Jemalloc [debian-11/arm64]' did not fail
        run: 'false'
        if: |
          needs.build_jemalloc_debian_11_arm64.result == 'skipped'
          && contains(inputs.necessary_jobs, ';Build Jemalloc [debian-11/arm64];')

      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.4.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst

      - name: Fetch Jemalloc binary
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: jemalloc-bin-debian-11-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "jemalloc"
          RUBY_PACKAGE_VERSION_ID: "3.4"
          CACHE_KEY_PREFIX: "sccache/debian-11/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "jemalloc"
          VARIANT_PACKAGE_SUFFIX: "-jemalloc"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.4"
          RUBY_PACKAGE_REVISION: "6"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.4_debian-11_jemalloc_arm64"
          ARTIFACT_PATH: output-jemalloc
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_4-malloctrim_amd64:
    name: 'Ruby [debian-11/3.4/malloctrim/amd64]'

    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.4/malloctrim/amd64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.4.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "malloctrim"
          RUBY_PACKAGE_VERSION_ID: "3.4"
          CACHE_KEY_PREFIX: "sccache/debian-11/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "malloctrim"
          VARIANT_PACKAGE_SUFFIX: "-malloctrim"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.4"
          RUBY_PACKAGE_REVISION: "6"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.4_debian-11_malloctrim_amd64"
          ARTIFACT_PATH: output-malloctrim
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_4-malloctrim_arm64:
    name: 'Ruby [debian-11/3.4/malloctrim/arm64]'

    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.4/malloctrim/arm64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.4.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "malloctrim"
          RUBY_PACKAGE_VERSION_ID: "3.4"
          CACHE_KEY_PREFIX: "sccache/debian-11/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "malloctrim"
          VARIANT_PACKAGE_SUFFIX: "-malloctrim"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.4"
          RUBY_PACKAGE_REVISION: "6"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.4_debian-11_malloctrim_arm64"
          ARTIFACT_PATH: output-malloctrim
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_3-normal_amd64:
    name: 'Ruby [debian-11/3.3/normal/amd64]'

    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.3/normal/amd64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.3.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "normal"
          RUBY_PACKAGE_VERSION_ID: "3.3"
          CACHE_KEY_PREFIX: "sccache/debian-11/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "normal"
          VARIANT_PACKAGE_SUFFIX: ""
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.3"
          RUBY_PACKAGE_REVISION: "9"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.3_debian-11_normal_amd64"
          ARTIFACT_PATH: output-normal
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_3-normal_arm64:
    name: 'Ruby [debian-11/3.3/normal/arm64]'

    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.3/normal/arm64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.3.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "normal"
          RUBY_PACKAGE_VERSION_ID: "3.3"
          CACHE_KEY_PREFIX: "sccache/debian-11/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "normal"
          VARIANT_PACKAGE_SUFFIX: ""
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.3"
          RUBY_PACKAGE_REVISION: "9"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.3_debian-11_normal_arm64"
          ARTIFACT_PATH: output-normal
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_3-jemalloc_amd64:
    name: 'Ruby [debian-11/3.3/jemalloc/amd64]'

    needs: build_jemalloc_debian_11_amd64
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.3/jemalloc/amd64];')
      && !failure() && !cancelled()
    steps:
      - name: Check whether 'Build Jemalloc [debian-11/amd64]' did not fail
        run: 'false'
        if: |
          needs.build_jemalloc_debian_11_amd64.result == 'skipped'
          && contains(inputs.necessary_jobs, ';Build Jemalloc [debian-11/amd64];')

      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.3.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst

      - name: Fetch Jemalloc binary
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: jemalloc-bin-debian-11-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "jemalloc"
          RUBY_PACKAGE_VERSION_ID: "3.3"
          CACHE_KEY_PREFIX: "sccache/debian-11/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "jemalloc"
          VARIANT_PACKAGE_SUFFIX: "-jemalloc"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.3"
          RUBY_PACKAGE_REVISION: "9"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.3_debian-11_jemalloc_amd64"
          ARTIFACT_PATH: output-jemalloc
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_3-jemalloc_arm64:
    name: 'Ruby [debian-11/3.3/jemalloc/arm64]'

    needs: build_jemalloc_debian_11_arm64
    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.3/jemalloc/arm64];')
      && !failure() && !cancelled()
    steps:
      - name: Check whether 'Build Jemalloc [debian-11/arm64]' did not fail
        run: 'false'
        if: |
          needs.build_jemalloc_debian_11_arm64.result == 'skipped'
          && contains(inputs.necessary_jobs, ';Build Jemalloc [debian-11/arm64];')

      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.3.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst

      - name: Fetch Jemalloc binary
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: jemalloc-bin-debian-11-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "jemalloc"
          RUBY_PACKAGE_VERSION_ID: "3.3"
          CACHE_KEY_PREFIX: "sccache/debian-11/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "jemalloc"
          VARIANT_PACKAGE_SUFFIX: "-jemalloc"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.3"
          RUBY_PACKAGE_REVISION: "9"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.3_debian-11_jemalloc_arm64"
          ARTIFACT_PATH: output-jemalloc
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_3-malloctrim_amd64:
    name: 'Ruby [debian-11/3.3/malloctrim/amd64]'

    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.3/malloctrim/amd64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.3.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "malloctrim"
          RUBY_PACKAGE_VERSION_ID: "3.3"
          CACHE_KEY_PREFIX: "sccache/debian-11/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "malloctrim"
          VARIANT_PACKAGE_SUFFIX: "-malloctrim"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.3"
          RUBY_PACKAGE_REVISION: "9"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.3_debian-11_malloctrim_amd64"
          ARTIFACT_PATH: output-malloctrim
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_3-malloctrim_arm64:
    name: 'Ruby [debian-11/3.3/malloctrim/arm64]'

    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.3/malloctrim/arm64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.3.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "malloctrim"
          RUBY_PACKAGE_VERSION_ID: "3.3"
          CACHE_KEY_PREFIX: "sccache/debian-11/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "malloctrim"
          VARIANT_PACKAGE_SUFFIX: "-malloctrim"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.3"
          RUBY_PACKAGE_REVISION: "9"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.3_debian-11_malloctrim_arm64"
          ARTIFACT_PATH: output-malloctrim
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_2-normal_amd64:
    name: 'Ruby [debian-11/3.2/normal/amd64]'

    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.2/normal/amd64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.2.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "normal"
          RUBY_PACKAGE_VERSION_ID: "3.2"
          CACHE_KEY_PREFIX: "sccache/debian-11/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "normal"
          VARIANT_PACKAGE_SUFFIX: ""
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.2"
          RUBY_PACKAGE_REVISION: "12"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.2_debian-11_normal_amd64"
          ARTIFACT_PATH: output-normal
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_2-normal_arm64:
    name: 'Ruby [debian-11/3.2/normal/arm64]'

    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.2/normal/arm64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.2.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "normal"
          RUBY_PACKAGE_VERSION_ID: "3.2"
          CACHE_KEY_PREFIX: "sccache/debian-11/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "normal"
          VARIANT_PACKAGE_SUFFIX: ""
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.2"
          RUBY_PACKAGE_REVISION: "12"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.2_debian-11_normal_arm64"
          ARTIFACT_PATH: output-normal
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_2-jemalloc_amd64:
    name: 'Ruby [debian-11/3.2/jemalloc/amd64]'

    needs: build_jemalloc_debian_11_amd64
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.2/jemalloc/amd64];')
      && !failure() && !cancelled()
    steps:
      - name: Check whether 'Build Jemalloc [debian-11/amd64]' did not fail
        run: 'false'
        if: |
          needs.build_jemalloc_debian_11_amd64.result == 'skipped'
          && contains(inputs.necessary_jobs, ';Build Jemalloc [debian-11/amd64];')

      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.2.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst

      - name: Fetch Jemalloc binary
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: jemalloc-bin-debian-11-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "jemalloc"
          RUBY_PACKAGE_VERSION_ID: "3.2"
          CACHE_KEY_PREFIX: "sccache/debian-11/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "jemalloc"
          VARIANT_PACKAGE_SUFFIX: "-jemalloc"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.2"
          RUBY_PACKAGE_REVISION: "12"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.2_debian-11_jemalloc_amd64"
          ARTIFACT_PATH: output-jemalloc
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_2-jemalloc_arm64:
    name: 'Ruby [debian-11/3.2/jemalloc/arm64]'

    needs: build_jemalloc_debian_11_arm64
    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.2/jemalloc/arm64];')
      && !failure() && !cancelled()
    steps:
      - name: Check whether 'Build Jemalloc [debian-11/arm64]' did not fail
        run: 'false'
        if: |
          needs.build_jemalloc_debian_11_arm64.result == 'skipped'
          && contains(inputs.necessary_jobs, ';Build Jemalloc [debian-11/arm64];')

      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.2.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst

      - name: Fetch Jemalloc binary
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: jemalloc-bin-debian-11-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "jemalloc"
          RUBY_PACKAGE_VERSION_ID: "3.2"
          CACHE_KEY_PREFIX: "sccache/debian-11/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "jemalloc"
          VARIANT_PACKAGE_SUFFIX: "-jemalloc"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.2"
          RUBY_PACKAGE_REVISION: "12"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.2_debian-11_jemalloc_arm64"
          ARTIFACT_PATH: output-jemalloc
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_2-malloctrim_amd64:
    name: 'Ruby [debian-11/3.2/malloctrim/amd64]'

    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.2/malloctrim/amd64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.2.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "malloctrim"
          RUBY_PACKAGE_VERSION_ID: "3.2"
          CACHE_KEY_PREFIX: "sccache/debian-11/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "malloctrim"
          VARIANT_PACKAGE_SUFFIX: "-malloctrim"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.2"
          RUBY_PACKAGE_REVISION: "12"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.2_debian-11_malloctrim_amd64"
          ARTIFACT_PATH: output-malloctrim
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_2-malloctrim_arm64:
    name: 'Ruby [debian-11/3.2/malloctrim/arm64]'

    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.2/malloctrim/arm64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.2.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "malloctrim"
          RUBY_PACKAGE_VERSION_ID: "3.2"
          CACHE_KEY_PREFIX: "sccache/debian-11/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "malloctrim"
          VARIANT_PACKAGE_SUFFIX: "-malloctrim"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.2"
          RUBY_PACKAGE_REVISION: "12"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.2_debian-11_malloctrim_arm64"
          ARTIFACT_PATH: output-malloctrim
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_1-normal_amd64:
    name: 'Ruby [debian-11/3.1/normal/amd64]'

    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.1/normal/amd64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.1.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "normal"
          RUBY_PACKAGE_VERSION_ID: "3.1"
          CACHE_KEY_PREFIX: "sccache/debian-11/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "normal"
          VARIANT_PACKAGE_SUFFIX: ""
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.1"
          RUBY_PACKAGE_REVISION: "16"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.1_debian-11_normal_amd64"
          ARTIFACT_PATH: output-normal
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_1-normal_arm64:
    name: 'Ruby [debian-11/3.1/normal/arm64]'

    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.1/normal/arm64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.1.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "normal"
          RUBY_PACKAGE_VERSION_ID: "3.1"
          CACHE_KEY_PREFIX: "sccache/debian-11/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "normal"
          VARIANT_PACKAGE_SUFFIX: ""
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.1"
          RUBY_PACKAGE_REVISION: "16"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.1_debian-11_normal_arm64"
          ARTIFACT_PATH: output-normal
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_1-jemalloc_amd64:
    name: 'Ruby [debian-11/3.1/jemalloc/amd64]'

    needs: build_jemalloc_debian_11_amd64
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.1/jemalloc/amd64];')
      && !failure() && !cancelled()
    steps:
      - name: Check whether 'Build Jemalloc [debian-11/amd64]' did not fail
        run: 'false'
        if: |
          needs.build_jemalloc_debian_11_amd64.result == 'skipped'
          && contains(inputs.necessary_jobs, ';Build Jemalloc [debian-11/amd64];')

      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.1.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst

      - name: Fetch Jemalloc binary
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: jemalloc-bin-debian-11-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "jemalloc"
          RUBY_PACKAGE_VERSION_ID: "3.1"
          CACHE_KEY_PREFIX: "sccache/debian-11/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "jemalloc"
          VARIANT_PACKAGE_SUFFIX: "-jemalloc"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.1"
          RUBY_PACKAGE_REVISION: "16"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.1_debian-11_jemalloc_amd64"
          ARTIFACT_PATH: output-jemalloc
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_1-jemalloc_arm64:
    name: 'Ruby [debian-11/3.1/jemalloc/arm64]'

    needs: build_jemalloc_debian_11_arm64
    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.1/jemalloc/arm64];')
      && !failure() && !cancelled()
    steps:
      - name: Check whether 'Build Jemalloc [debian-11/arm64]' did not fail
        run: 'false'
        if: |
          needs.build_jemalloc_debian_11_arm64.result == 'skipped'
          && contains(inputs.necessary_jobs, ';Build Jemalloc [debian-11/arm64];')

      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.1.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst

      - name: Fetch Jemalloc binary
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: jemalloc-bin-debian-11-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "jemalloc"
          RUBY_PACKAGE_VERSION_ID: "3.1"
          CACHE_KEY_PREFIX: "sccache/debian-11/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "jemalloc"
          VARIANT_PACKAGE_SUFFIX: "-jemalloc"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.1"
          RUBY_PACKAGE_REVISION: "16"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.1_debian-11_jemalloc_arm64"
          ARTIFACT_PATH: output-jemalloc
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_1-malloctrim_amd64:
    name: 'Ruby [debian-11/3.1/malloctrim/amd64]'

    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.1/malloctrim/amd64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.1.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "malloctrim"
          RUBY_PACKAGE_VERSION_ID: "3.1"
          CACHE_KEY_PREFIX: "sccache/debian-11/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "malloctrim"
          VARIANT_PACKAGE_SUFFIX: "-malloctrim"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.1"
          RUBY_PACKAGE_REVISION: "16"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.1_debian-11_malloctrim_amd64"
          ARTIFACT_PATH: output-malloctrim
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_1-malloctrim_arm64:
    name: 'Ruby [debian-11/3.1/malloctrim/arm64]'

    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.1/malloctrim/arm64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.1.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "malloctrim"
          RUBY_PACKAGE_VERSION_ID: "3.1"
          CACHE_KEY_PREFIX: "sccache/debian-11/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "malloctrim"
          VARIANT_PACKAGE_SUFFIX: "-malloctrim"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.1"
          RUBY_PACKAGE_REVISION: "16"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.1_debian-11_malloctrim_arm64"
          ARTIFACT_PATH: output-malloctrim
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_4_7-normal_amd64:
    name: 'Ruby [debian-11/3.4.7/normal/amd64]'

    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.4.7/normal/amd64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.4.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "normal"
          RUBY_PACKAGE_VERSION_ID: "3.4.7"
          CACHE_KEY_PREFIX: "sccache/debian-11/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "normal"
          VARIANT_PACKAGE_SUFFIX: ""
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.4.7"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.4.7_debian-11_normal_amd64"
          ARTIFACT_PATH: output-normal
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_4_7-normal_arm64:
    name: 'Ruby [debian-11/3.4.7/normal/arm64]'

    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.4.7/normal/arm64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.4.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "normal"
          RUBY_PACKAGE_VERSION_ID: "3.4.7"
          CACHE_KEY_PREFIX: "sccache/debian-11/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "normal"
          VARIANT_PACKAGE_SUFFIX: ""
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.4.7"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.4.7_debian-11_normal_arm64"
          ARTIFACT_PATH: output-normal
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_4_7-jemalloc_amd64:
    name: 'Ruby [debian-11/3.4.7/jemalloc/amd64]'

    needs: build_jemalloc_debian_11_amd64
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.4.7/jemalloc/amd64];')
      && !failure() && !cancelled()
    steps:
      - name: Check whether 'Build Jemalloc [debian-11/amd64]' did not fail
        run: 'false'
        if: |
          needs.build_jemalloc_debian_11_amd64.result == 'skipped'
          && contains(inputs.necessary_jobs, ';Build Jemalloc [debian-11/amd64];')

      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.4.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst

      - name: Fetch Jemalloc binary
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: jemalloc-bin-debian-11-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "jemalloc"
          RUBY_PACKAGE_VERSION_ID: "3.4.7"
          CACHE_KEY_PREFIX: "sccache/debian-11/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "jemalloc"
          VARIANT_PACKAGE_SUFFIX: "-jemalloc"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.4.7"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.4.7_debian-11_jemalloc_amd64"
          ARTIFACT_PATH: output-jemalloc
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_4_7-jemalloc_arm64:
    name: 'Ruby [debian-11/3.4.7/jemalloc/arm64]'

    needs: build_jemalloc_debian_11_arm64
    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.4.7/jemalloc/arm64];')
      && !failure() && !cancelled()
    steps:
      - name: Check whether 'Build Jemalloc [debian-11/arm64]' did not fail
        run: 'false'
        if: |
          needs.build_jemalloc_debian_11_arm64.result == 'skipped'
          && contains(inputs.necessary_jobs, ';Build Jemalloc [debian-11/arm64];')

      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.4.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst

      - name: Fetch Jemalloc binary
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: jemalloc-bin-debian-11-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "jemalloc"
          RUBY_PACKAGE_VERSION_ID: "3.4.7"
          CACHE_KEY_PREFIX: "sccache/debian-11/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "jemalloc"
          VARIANT_PACKAGE_SUFFIX: "-jemalloc"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.4.7"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.4.7_debian-11_jemalloc_arm64"
          ARTIFACT_PATH: output-jemalloc
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_4_7-malloctrim_amd64:
    name: 'Ruby [debian-11/3.4.7/malloctrim/amd64]'

    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.4.7/malloctrim/amd64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.4.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "malloctrim"
          RUBY_PACKAGE_VERSION_ID: "3.4.7"
          CACHE_KEY_PREFIX: "sccache/debian-11/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "malloctrim"
          VARIANT_PACKAGE_SUFFIX: "-malloctrim"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.4.7"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.4.7_debian-11_malloctrim_amd64"
          ARTIFACT_PATH: output-malloctrim
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_4_7-malloctrim_arm64:
    name: 'Ruby [debian-11/3.4.7/malloctrim/arm64]'

    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.4.7/malloctrim/arm64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.4.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "malloctrim"
          RUBY_PACKAGE_VERSION_ID: "3.4.7"
          CACHE_KEY_PREFIX: "sccache/debian-11/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "malloctrim"
          VARIANT_PACKAGE_SUFFIX: "-malloctrim"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.4.7"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.4.7_debian-11_malloctrim_arm64"
          ARTIFACT_PATH: output-malloctrim
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_3_9-normal_amd64:
    name: 'Ruby [debian-11/3.3.9/normal/amd64]'

    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.3.9/normal/amd64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.3.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "normal"
          RUBY_PACKAGE_VERSION_ID: "3.3.9"
          CACHE_KEY_PREFIX: "sccache/debian-11/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "normal"
          VARIANT_PACKAGE_SUFFIX: ""
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.3.9"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.3.9_debian-11_normal_amd64"
          ARTIFACT_PATH: output-normal
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_3_9-normal_arm64:
    name: 'Ruby [debian-11/3.3.9/normal/arm64]'

    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.3.9/normal/arm64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.3.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "normal"
          RUBY_PACKAGE_VERSION_ID: "3.3.9"
          CACHE_KEY_PREFIX: "sccache/debian-11/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "normal"
          VARIANT_PACKAGE_SUFFIX: ""
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.3.9"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.3.9_debian-11_normal_arm64"
          ARTIFACT_PATH: output-normal
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_3_9-jemalloc_amd64:
    name: 'Ruby [debian-11/3.3.9/jemalloc/amd64]'

    needs: build_jemalloc_debian_11_amd64
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.3.9/jemalloc/amd64];')
      && !failure() && !cancelled()
    steps:
      - name: Check whether 'Build Jemalloc [debian-11/amd64]' did not fail
        run: 'false'
        if: |
          needs.build_jemalloc_debian_11_amd64.result == 'skipped'
          && contains(inputs.necessary_jobs, ';Build Jemalloc [debian-11/amd64];')

      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.3.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst

      - name: Fetch Jemalloc binary
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: jemalloc-bin-debian-11-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "jemalloc"
          RUBY_PACKAGE_VERSION_ID: "3.3.9"
          CACHE_KEY_PREFIX: "sccache/debian-11/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "jemalloc"
          VARIANT_PACKAGE_SUFFIX: "-jemalloc"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.3.9"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.3.9_debian-11_jemalloc_amd64"
          ARTIFACT_PATH: output-jemalloc
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_3_9-jemalloc_arm64:
    name: 'Ruby [debian-11/3.3.9/jemalloc/arm64]'

    needs: build_jemalloc_debian_11_arm64
    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.3.9/jemalloc/arm64];')
      && !failure() && !cancelled()
    steps:
      - name: Check whether 'Build Jemalloc [debian-11/arm64]' did not fail
        run: 'false'
        if: |
          needs.build_jemalloc_debian_11_arm64.result == 'skipped'
          && contains(inputs.necessary_jobs, ';Build Jemalloc [debian-11/arm64];')

      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.3.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst

      - name: Fetch Jemalloc binary
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: jemalloc-bin-debian-11-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "jemalloc"
          RUBY_PACKAGE_VERSION_ID: "3.3.9"
          CACHE_KEY_PREFIX: "sccache/debian-11/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "jemalloc"
          VARIANT_PACKAGE_SUFFIX: "-jemalloc"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.3.9"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.3.9_debian-11_jemalloc_arm64"
          ARTIFACT_PATH: output-jemalloc
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_3_9-malloctrim_amd64:
    name: 'Ruby [debian-11/3.3.9/malloctrim/amd64]'

    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.3.9/malloctrim/amd64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.3.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "malloctrim"
          RUBY_PACKAGE_VERSION_ID: "3.3.9"
          CACHE_KEY_PREFIX: "sccache/debian-11/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "malloctrim"
          VARIANT_PACKAGE_SUFFIX: "-malloctrim"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.3.9"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.3.9_debian-11_malloctrim_amd64"
          ARTIFACT_PATH: output-malloctrim
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_3_9-malloctrim_arm64:
    name: 'Ruby [debian-11/3.3.9/malloctrim/arm64]'

    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.3.9/malloctrim/arm64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.3.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "malloctrim"
          RUBY_PACKAGE_VERSION_ID: "3.3.9"
          CACHE_KEY_PREFIX: "sccache/debian-11/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "malloctrim"
          VARIANT_PACKAGE_SUFFIX: "-malloctrim"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.3.9"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.3.9_debian-11_malloctrim_arm64"
          ARTIFACT_PATH: output-malloctrim
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_2_9-normal_amd64:
    name: 'Ruby [debian-11/3.2.9/normal/amd64]'

    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.2.9/normal/amd64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.2.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "normal"
          RUBY_PACKAGE_VERSION_ID: "3.2.9"
          CACHE_KEY_PREFIX: "sccache/debian-11/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "normal"
          VARIANT_PACKAGE_SUFFIX: ""
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.2.9"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.2.9_debian-11_normal_amd64"
          ARTIFACT_PATH: output-normal
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_2_9-normal_arm64:
    name: 'Ruby [debian-11/3.2.9/normal/arm64]'

    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.2.9/normal/arm64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.2.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "normal"
          RUBY_PACKAGE_VERSION_ID: "3.2.9"
          CACHE_KEY_PREFIX: "sccache/debian-11/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "normal"
          VARIANT_PACKAGE_SUFFIX: ""
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.2.9"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.2.9_debian-11_normal_arm64"
          ARTIFACT_PATH: output-normal
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_2_9-jemalloc_amd64:
    name: 'Ruby [debian-11/3.2.9/jemalloc/amd64]'

    needs: build_jemalloc_debian_11_amd64
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.2.9/jemalloc/amd64];')
      && !failure() && !cancelled()
    steps:
      - name: Check whether 'Build Jemalloc [debian-11/amd64]' did not fail
        run: 'false'
        if: |
          needs.build_jemalloc_debian_11_amd64.result == 'skipped'
          && contains(inputs.necessary_jobs, ';Build Jemalloc [debian-11/amd64];')

      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.2.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst

      - name: Fetch Jemalloc binary
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: jemalloc-bin-debian-11-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "jemalloc"
          RUBY_PACKAGE_VERSION_ID: "3.2.9"
          CACHE_KEY_PREFIX: "sccache/debian-11/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "jemalloc"
          VARIANT_PACKAGE_SUFFIX: "-jemalloc"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.2.9"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.2.9_debian-11_jemalloc_amd64"
          ARTIFACT_PATH: output-jemalloc
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_2_9-jemalloc_arm64:
    name: 'Ruby [debian-11/3.2.9/jemalloc/arm64]'

    needs: build_jemalloc_debian_11_arm64
    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.2.9/jemalloc/arm64];')
      && !failure() && !cancelled()
    steps:
      - name: Check whether 'Build Jemalloc [debian-11/arm64]' did not fail
        run: 'false'
        if: |
          needs.build_jemalloc_debian_11_arm64.result == 'skipped'
          && contains(inputs.necessary_jobs, ';Build Jemalloc [debian-11/arm64];')

      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.2.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst

      - name: Fetch Jemalloc binary
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: jemalloc-bin-debian-11-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "jemalloc"
          RUBY_PACKAGE_VERSION_ID: "3.2.9"
          CACHE_KEY_PREFIX: "sccache/debian-11/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "jemalloc"
          VARIANT_PACKAGE_SUFFIX: "-jemalloc"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.2.9"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.2.9_debian-11_jemalloc_arm64"
          ARTIFACT_PATH: output-jemalloc
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_2_9-malloctrim_amd64:
    name: 'Ruby [debian-11/3.2.9/malloctrim/amd64]'

    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.2.9/malloctrim/amd64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.2.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "malloctrim"
          RUBY_PACKAGE_VERSION_ID: "3.2.9"
          CACHE_KEY_PREFIX: "sccache/debian-11/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "malloctrim"
          VARIANT_PACKAGE_SUFFIX: "-malloctrim"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.2.9"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.2.9_debian-11_malloctrim_amd64"
          ARTIFACT_PATH: output-malloctrim
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_2_9-malloctrim_arm64:
    name: 'Ruby [debian-11/3.2.9/malloctrim/arm64]'

    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.2.9/malloctrim/arm64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.2.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "malloctrim"
          RUBY_PACKAGE_VERSION_ID: "3.2.9"
          CACHE_KEY_PREFIX: "sccache/debian-11/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "malloctrim"
          VARIANT_PACKAGE_SUFFIX: "-malloctrim"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.2.9"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.2.9_debian-11_malloctrim_arm64"
          ARTIFACT_PATH: output-malloctrim
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_1_7-normal_amd64:
    name: 'Ruby [debian-11/3.1.7/normal/amd64]'

    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.1.7/normal/amd64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.1.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "normal"
          RUBY_PACKAGE_VERSION_ID: "3.1.7"
          CACHE_KEY_PREFIX: "sccache/debian-11/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "normal"
          VARIANT_PACKAGE_SUFFIX: ""
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.1.7"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.1.7_debian-11_normal_amd64"
          ARTIFACT_PATH: output-normal
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_1_7-normal_arm64:
    name: 'Ruby [debian-11/3.1.7/normal/arm64]'

    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.1.7/normal/arm64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.1.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "normal"
          RUBY_PACKAGE_VERSION_ID: "3.1.7"
          CACHE_KEY_PREFIX: "sccache/debian-11/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "normal"
          VARIANT_PACKAGE_SUFFIX: ""
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.1.7"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.1.7_debian-11_normal_arm64"
          ARTIFACT_PATH: output-normal
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_1_7-jemalloc_amd64:
    name: 'Ruby [debian-11/3.1.7/jemalloc/amd64]'

    needs: build_jemalloc_debian_11_amd64
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.1.7/jemalloc/amd64];')
      && !failure() && !cancelled()
    steps:
      - name: Check whether 'Build Jemalloc [debian-11/amd64]' did not fail
        run: 'false'
        if: |
          needs.build_jemalloc_debian_11_amd64.result == 'skipped'
          && contains(inputs.necessary_jobs, ';Build Jemalloc [debian-11/amd64];')

      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.1.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst

      - name: Fetch Jemalloc binary
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: jemalloc-bin-debian-11-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "jemalloc"
          RUBY_PACKAGE_VERSION_ID: "3.1.7"
          CACHE_KEY_PREFIX: "sccache/debian-11/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "jemalloc"
          VARIANT_PACKAGE_SUFFIX: "-jemalloc"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.1.7"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.1.7_debian-11_jemalloc_amd64"
          ARTIFACT_PATH: output-jemalloc
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_1_7-jemalloc_arm64:
    name: 'Ruby [debian-11/3.1.7/jemalloc/arm64]'

    needs: build_jemalloc_debian_11_arm64
    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.1.7/jemalloc/arm64];')
      && !failure() && !cancelled()
    steps:
      - name: Check whether 'Build Jemalloc [debian-11/arm64]' did not fail
        run: 'false'
        if: |
          needs.build_jemalloc_debian_11_arm64.result == 'skipped'
          && contains(inputs.necessary_jobs, ';Build Jemalloc [debian-11/arm64];')

      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.1.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst

      - name: Fetch Jemalloc binary
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: jemalloc-bin-debian-11-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "jemalloc"
          RUBY_PACKAGE_VERSION_ID: "3.1.7"
          CACHE_KEY_PREFIX: "sccache/debian-11/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "jemalloc"
          VARIANT_PACKAGE_SUFFIX: "-jemalloc"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.1.7"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.1.7_debian-11_jemalloc_arm64"
          ARTIFACT_PATH: output-jemalloc
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_1_7-malloctrim_amd64:
    name: 'Ruby [debian-11/3.1.7/malloctrim/amd64]'

    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.1.7/malloctrim/amd64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.1.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "malloctrim"
          RUBY_PACKAGE_VERSION_ID: "3.1.7"
          CACHE_KEY_PREFIX: "sccache/debian-11/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "malloctrim"
          VARIANT_PACKAGE_SUFFIX: "-malloctrim"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.1.7"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.1.7_debian-11_malloctrim_amd64"
          ARTIFACT_PATH: output-malloctrim
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_debian_11-3_1_7-malloctrim_arm64:
    name: 'Ruby [debian-11/3.1.7/malloctrim/arm64]'

    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.1.7/malloctrim/arm64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.1.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          ARTIFACT_NAME: 'docker-image-debian-11-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image debian-11;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "debian-11"
          VARIANT_NAME: "malloctrim"
          RUBY_PACKAGE_VERSION_ID: "3.1.7"
          CACHE_KEY_PREFIX: "sccache/debian-11/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "debian-11"
          VARIANT_NAME: "malloctrim"
          VARIANT_PACKAGE_SUFFIX: "-malloctrim"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.1.7"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.1.7_debian-11_malloctrim_arm64"
          ARTIFACT_PATH: output-malloctrim
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}



  build_ruby_ubuntu_22_04-3_4-normal_amd64:
    name: 'Ruby [ubuntu-22.04/3.4/normal/amd64]'

    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.4/normal/amd64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.4.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "normal"
          RUBY_PACKAGE_VERSION_ID: "3.4"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "normal"
          VARIANT_PACKAGE_SUFFIX: ""
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.4"
          RUBY_PACKAGE_REVISION: "6"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.4_ubuntu-22.04_normal_amd64"
          ARTIFACT_PATH: output-normal
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_4-normal_arm64:
    name: 'Ruby [ubuntu-22.04/3.4/normal/arm64]'

    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.4/normal/arm64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.4.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "normal"
          RUBY_PACKAGE_VERSION_ID: "3.4"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "normal"
          VARIANT_PACKAGE_SUFFIX: ""
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.4"
          RUBY_PACKAGE_REVISION: "6"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.4_ubuntu-22.04_normal_arm64"
          ARTIFACT_PATH: output-normal
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_4-jemalloc_amd64:
    name: 'Ruby [ubuntu-22.04/3.4/jemalloc/amd64]'

    needs: build_jemalloc_ubuntu_22_04_amd64
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.4/jemalloc/amd64];')
      && !failure() && !cancelled()
    steps:
      - name: Check whether 'Build Jemalloc [ubuntu-22.04/amd64]' did not fail
        run: 'false'
        if: |
          needs.build_jemalloc_ubuntu_22_04_amd64.result == 'skipped'
          && contains(inputs.necessary_jobs, ';Build Jemalloc [ubuntu-22.04/amd64];')

      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.4.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst

      - name: Fetch Jemalloc binary
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: jemalloc-bin-ubuntu-22.04-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "jemalloc"
          RUBY_PACKAGE_VERSION_ID: "3.4"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "jemalloc"
          VARIANT_PACKAGE_SUFFIX: "-jemalloc"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.4"
          RUBY_PACKAGE_REVISION: "6"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.4_ubuntu-22.04_jemalloc_amd64"
          ARTIFACT_PATH: output-jemalloc
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_4-jemalloc_arm64:
    name: 'Ruby [ubuntu-22.04/3.4/jemalloc/arm64]'

    needs: build_jemalloc_ubuntu_22_04_arm64
    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.4/jemalloc/arm64];')
      && !failure() && !cancelled()
    steps:
      - name: Check whether 'Build Jemalloc [ubuntu-22.04/arm64]' did not fail
        run: 'false'
        if: |
          needs.build_jemalloc_ubuntu_22_04_arm64.result == 'skipped'
          && contains(inputs.necessary_jobs, ';Build Jemalloc [ubuntu-22.04/arm64];')

      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.4.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst

      - name: Fetch Jemalloc binary
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: jemalloc-bin-ubuntu-22.04-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "jemalloc"
          RUBY_PACKAGE_VERSION_ID: "3.4"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "jemalloc"
          VARIANT_PACKAGE_SUFFIX: "-jemalloc"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.4"
          RUBY_PACKAGE_REVISION: "6"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.4_ubuntu-22.04_jemalloc_arm64"
          ARTIFACT_PATH: output-jemalloc
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_4-malloctrim_amd64:
    name: 'Ruby [ubuntu-22.04/3.4/malloctrim/amd64]'

    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.4/malloctrim/amd64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.4.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "malloctrim"
          RUBY_PACKAGE_VERSION_ID: "3.4"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "malloctrim"
          VARIANT_PACKAGE_SUFFIX: "-malloctrim"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.4"
          RUBY_PACKAGE_REVISION: "6"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.4_ubuntu-22.04_malloctrim_amd64"
          ARTIFACT_PATH: output-malloctrim
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_4-malloctrim_arm64:
    name: 'Ruby [ubuntu-22.04/3.4/malloctrim/arm64]'

    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.4/malloctrim/arm64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.4.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "malloctrim"
          RUBY_PACKAGE_VERSION_ID: "3.4"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "malloctrim"
          VARIANT_PACKAGE_SUFFIX: "-malloctrim"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.4"
          RUBY_PACKAGE_REVISION: "6"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.4_ubuntu-22.04_malloctrim_arm64"
          ARTIFACT_PATH: output-malloctrim
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_3-normal_amd64:
    name: 'Ruby [ubuntu-22.04/3.3/normal/amd64]'

    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.3/normal/amd64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.3.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "normal"
          RUBY_PACKAGE_VERSION_ID: "3.3"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "normal"
          VARIANT_PACKAGE_SUFFIX: ""
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.3"
          RUBY_PACKAGE_REVISION: "9"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.3_ubuntu-22.04_normal_amd64"
          ARTIFACT_PATH: output-normal
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_3-normal_arm64:
    name: 'Ruby [ubuntu-22.04/3.3/normal/arm64]'

    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.3/normal/arm64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.3.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "normal"
          RUBY_PACKAGE_VERSION_ID: "3.3"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "normal"
          VARIANT_PACKAGE_SUFFIX: ""
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.3"
          RUBY_PACKAGE_REVISION: "9"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.3_ubuntu-22.04_normal_arm64"
          ARTIFACT_PATH: output-normal
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_3-jemalloc_amd64:
    name: 'Ruby [ubuntu-22.04/3.3/jemalloc/amd64]'

    needs: build_jemalloc_ubuntu_22_04_amd64
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.3/jemalloc/amd64];')
      && !failure() && !cancelled()
    steps:
      - name: Check whether 'Build Jemalloc [ubuntu-22.04/amd64]' did not fail
        run: 'false'
        if: |
          needs.build_jemalloc_ubuntu_22_04_amd64.result == 'skipped'
          && contains(inputs.necessary_jobs, ';Build Jemalloc [ubuntu-22.04/amd64];')

      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.3.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst

      - name: Fetch Jemalloc binary
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: jemalloc-bin-ubuntu-22.04-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "jemalloc"
          RUBY_PACKAGE_VERSION_ID: "3.3"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "jemalloc"
          VARIANT_PACKAGE_SUFFIX: "-jemalloc"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.3"
          RUBY_PACKAGE_REVISION: "9"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.3_ubuntu-22.04_jemalloc_amd64"
          ARTIFACT_PATH: output-jemalloc
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_3-jemalloc_arm64:
    name: 'Ruby [ubuntu-22.04/3.3/jemalloc/arm64]'

    needs: build_jemalloc_ubuntu_22_04_arm64
    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.3/jemalloc/arm64];')
      && !failure() && !cancelled()
    steps:
      - name: Check whether 'Build Jemalloc [ubuntu-22.04/arm64]' did not fail
        run: 'false'
        if: |
          needs.build_jemalloc_ubuntu_22_04_arm64.result == 'skipped'
          && contains(inputs.necessary_jobs, ';Build Jemalloc [ubuntu-22.04/arm64];')

      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.3.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst

      - name: Fetch Jemalloc binary
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: jemalloc-bin-ubuntu-22.04-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "jemalloc"
          RUBY_PACKAGE_VERSION_ID: "3.3"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "jemalloc"
          VARIANT_PACKAGE_SUFFIX: "-jemalloc"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.3"
          RUBY_PACKAGE_REVISION: "9"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.3_ubuntu-22.04_jemalloc_arm64"
          ARTIFACT_PATH: output-jemalloc
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_3-malloctrim_amd64:
    name: 'Ruby [ubuntu-22.04/3.3/malloctrim/amd64]'

    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.3/malloctrim/amd64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.3.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "malloctrim"
          RUBY_PACKAGE_VERSION_ID: "3.3"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "malloctrim"
          VARIANT_PACKAGE_SUFFIX: "-malloctrim"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.3"
          RUBY_PACKAGE_REVISION: "9"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.3_ubuntu-22.04_malloctrim_amd64"
          ARTIFACT_PATH: output-malloctrim
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_3-malloctrim_arm64:
    name: 'Ruby [ubuntu-22.04/3.3/malloctrim/arm64]'

    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.3/malloctrim/arm64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.3.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "malloctrim"
          RUBY_PACKAGE_VERSION_ID: "3.3"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "malloctrim"
          VARIANT_PACKAGE_SUFFIX: "-malloctrim"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.3"
          RUBY_PACKAGE_REVISION: "9"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.3_ubuntu-22.04_malloctrim_arm64"
          ARTIFACT_PATH: output-malloctrim
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_2-normal_amd64:
    name: 'Ruby [ubuntu-22.04/3.2/normal/amd64]'

    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.2/normal/amd64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.2.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "normal"
          RUBY_PACKAGE_VERSION_ID: "3.2"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "normal"
          VARIANT_PACKAGE_SUFFIX: ""
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.2"
          RUBY_PACKAGE_REVISION: "12"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.2_ubuntu-22.04_normal_amd64"
          ARTIFACT_PATH: output-normal
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_2-normal_arm64:
    name: 'Ruby [ubuntu-22.04/3.2/normal/arm64]'

    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.2/normal/arm64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.2.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "normal"
          RUBY_PACKAGE_VERSION_ID: "3.2"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "normal"
          VARIANT_PACKAGE_SUFFIX: ""
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.2"
          RUBY_PACKAGE_REVISION: "12"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.2_ubuntu-22.04_normal_arm64"
          ARTIFACT_PATH: output-normal
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_2-jemalloc_amd64:
    name: 'Ruby [ubuntu-22.04/3.2/jemalloc/amd64]'

    needs: build_jemalloc_ubuntu_22_04_amd64
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.2/jemalloc/amd64];')
      && !failure() && !cancelled()
    steps:
      - name: Check whether 'Build Jemalloc [ubuntu-22.04/amd64]' did not fail
        run: 'false'
        if: |
          needs.build_jemalloc_ubuntu_22_04_amd64.result == 'skipped'
          && contains(inputs.necessary_jobs, ';Build Jemalloc [ubuntu-22.04/amd64];')

      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.2.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst

      - name: Fetch Jemalloc binary
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: jemalloc-bin-ubuntu-22.04-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "jemalloc"
          RUBY_PACKAGE_VERSION_ID: "3.2"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "jemalloc"
          VARIANT_PACKAGE_SUFFIX: "-jemalloc"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.2"
          RUBY_PACKAGE_REVISION: "12"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.2_ubuntu-22.04_jemalloc_amd64"
          ARTIFACT_PATH: output-jemalloc
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_2-jemalloc_arm64:
    name: 'Ruby [ubuntu-22.04/3.2/jemalloc/arm64]'

    needs: build_jemalloc_ubuntu_22_04_arm64
    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.2/jemalloc/arm64];')
      && !failure() && !cancelled()
    steps:
      - name: Check whether 'Build Jemalloc [ubuntu-22.04/arm64]' did not fail
        run: 'false'
        if: |
          needs.build_jemalloc_ubuntu_22_04_arm64.result == 'skipped'
          && contains(inputs.necessary_jobs, ';Build Jemalloc [ubuntu-22.04/arm64];')

      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.2.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst

      - name: Fetch Jemalloc binary
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: jemalloc-bin-ubuntu-22.04-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "jemalloc"
          RUBY_PACKAGE_VERSION_ID: "3.2"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "jemalloc"
          VARIANT_PACKAGE_SUFFIX: "-jemalloc"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.2"
          RUBY_PACKAGE_REVISION: "12"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.2_ubuntu-22.04_jemalloc_arm64"
          ARTIFACT_PATH: output-jemalloc
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_2-malloctrim_amd64:
    name: 'Ruby [ubuntu-22.04/3.2/malloctrim/amd64]'

    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.2/malloctrim/amd64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.2.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "malloctrim"
          RUBY_PACKAGE_VERSION_ID: "3.2"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "malloctrim"
          VARIANT_PACKAGE_SUFFIX: "-malloctrim"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.2"
          RUBY_PACKAGE_REVISION: "12"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.2_ubuntu-22.04_malloctrim_amd64"
          ARTIFACT_PATH: output-malloctrim
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_2-malloctrim_arm64:
    name: 'Ruby [ubuntu-22.04/3.2/malloctrim/arm64]'

    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.2/malloctrim/arm64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.2.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "malloctrim"
          RUBY_PACKAGE_VERSION_ID: "3.2"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "malloctrim"
          VARIANT_PACKAGE_SUFFIX: "-malloctrim"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.2"
          RUBY_PACKAGE_REVISION: "12"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.2_ubuntu-22.04_malloctrim_arm64"
          ARTIFACT_PATH: output-malloctrim
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_1-normal_amd64:
    name: 'Ruby [ubuntu-22.04/3.1/normal/amd64]'

    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.1/normal/amd64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.1.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "normal"
          RUBY_PACKAGE_VERSION_ID: "3.1"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "normal"
          VARIANT_PACKAGE_SUFFIX: ""
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.1"
          RUBY_PACKAGE_REVISION: "16"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.1_ubuntu-22.04_normal_amd64"
          ARTIFACT_PATH: output-normal
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_1-normal_arm64:
    name: 'Ruby [ubuntu-22.04/3.1/normal/arm64]'

    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.1/normal/arm64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.1.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "normal"
          RUBY_PACKAGE_VERSION_ID: "3.1"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "normal"
          VARIANT_PACKAGE_SUFFIX: ""
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.1"
          RUBY_PACKAGE_REVISION: "16"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.1_ubuntu-22.04_normal_arm64"
          ARTIFACT_PATH: output-normal
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_1-jemalloc_amd64:
    name: 'Ruby [ubuntu-22.04/3.1/jemalloc/amd64]'

    needs: build_jemalloc_ubuntu_22_04_amd64
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.1/jemalloc/amd64];')
      && !failure() && !cancelled()
    steps:
      - name: Check whether 'Build Jemalloc [ubuntu-22.04/amd64]' did not fail
        run: 'false'
        if: |
          needs.build_jemalloc_ubuntu_22_04_amd64.result == 'skipped'
          && contains(inputs.necessary_jobs, ';Build Jemalloc [ubuntu-22.04/amd64];')

      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.1.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst

      - name: Fetch Jemalloc binary
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: jemalloc-bin-ubuntu-22.04-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "jemalloc"
          RUBY_PACKAGE_VERSION_ID: "3.1"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "jemalloc"
          VARIANT_PACKAGE_SUFFIX: "-jemalloc"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.1"
          RUBY_PACKAGE_REVISION: "16"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.1_ubuntu-22.04_jemalloc_amd64"
          ARTIFACT_PATH: output-jemalloc
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_1-jemalloc_arm64:
    name: 'Ruby [ubuntu-22.04/3.1/jemalloc/arm64]'

    needs: build_jemalloc_ubuntu_22_04_arm64
    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.1/jemalloc/arm64];')
      && !failure() && !cancelled()
    steps:
      - name: Check whether 'Build Jemalloc [ubuntu-22.04/arm64]' did not fail
        run: 'false'
        if: |
          needs.build_jemalloc_ubuntu_22_04_arm64.result == 'skipped'
          && contains(inputs.necessary_jobs, ';Build Jemalloc [ubuntu-22.04/arm64];')

      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.1.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst

      - name: Fetch Jemalloc binary
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: jemalloc-bin-ubuntu-22.04-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "jemalloc"
          RUBY_PACKAGE_VERSION_ID: "3.1"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "jemalloc"
          VARIANT_PACKAGE_SUFFIX: "-jemalloc"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.1"
          RUBY_PACKAGE_REVISION: "16"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.1_ubuntu-22.04_jemalloc_arm64"
          ARTIFACT_PATH: output-jemalloc
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_1-malloctrim_amd64:
    name: 'Ruby [ubuntu-22.04/3.1/malloctrim/amd64]'

    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.1/malloctrim/amd64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.1.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "malloctrim"
          RUBY_PACKAGE_VERSION_ID: "3.1"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "malloctrim"
          VARIANT_PACKAGE_SUFFIX: "-malloctrim"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.1"
          RUBY_PACKAGE_REVISION: "16"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.1_ubuntu-22.04_malloctrim_amd64"
          ARTIFACT_PATH: output-malloctrim
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_1-malloctrim_arm64:
    name: 'Ruby [ubuntu-22.04/3.1/malloctrim/arm64]'

    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.1/malloctrim/arm64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.1.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "malloctrim"
          RUBY_PACKAGE_VERSION_ID: "3.1"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "malloctrim"
          VARIANT_PACKAGE_SUFFIX: "-malloctrim"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.1"
          RUBY_PACKAGE_REVISION: "16"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.1_ubuntu-22.04_malloctrim_arm64"
          ARTIFACT_PATH: output-malloctrim
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_4_7-normal_amd64:
    name: 'Ruby [ubuntu-22.04/3.4.7/normal/amd64]'

    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.4.7/normal/amd64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.4.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "normal"
          RUBY_PACKAGE_VERSION_ID: "3.4.7"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "normal"
          VARIANT_PACKAGE_SUFFIX: ""
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.4.7"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.4.7_ubuntu-22.04_normal_amd64"
          ARTIFACT_PATH: output-normal
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_4_7-normal_arm64:
    name: 'Ruby [ubuntu-22.04/3.4.7/normal/arm64]'

    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.4.7/normal/arm64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.4.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "normal"
          RUBY_PACKAGE_VERSION_ID: "3.4.7"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "normal"
          VARIANT_PACKAGE_SUFFIX: ""
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.4.7"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.4.7_ubuntu-22.04_normal_arm64"
          ARTIFACT_PATH: output-normal
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_4_7-jemalloc_amd64:
    name: 'Ruby [ubuntu-22.04/3.4.7/jemalloc/amd64]'

    needs: build_jemalloc_ubuntu_22_04_amd64
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.4.7/jemalloc/amd64];')
      && !failure() && !cancelled()
    steps:
      - name: Check whether 'Build Jemalloc [ubuntu-22.04/amd64]' did not fail
        run: 'false'
        if: |
          needs.build_jemalloc_ubuntu_22_04_amd64.result == 'skipped'
          && contains(inputs.necessary_jobs, ';Build Jemalloc [ubuntu-22.04/amd64];')

      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.4.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst

      - name: Fetch Jemalloc binary
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: jemalloc-bin-ubuntu-22.04-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "jemalloc"
          RUBY_PACKAGE_VERSION_ID: "3.4.7"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "jemalloc"
          VARIANT_PACKAGE_SUFFIX: "-jemalloc"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.4.7"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.4.7_ubuntu-22.04_jemalloc_amd64"
          ARTIFACT_PATH: output-jemalloc
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_4_7-jemalloc_arm64:
    name: 'Ruby [ubuntu-22.04/3.4.7/jemalloc/arm64]'

    needs: build_jemalloc_ubuntu_22_04_arm64
    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.4.7/jemalloc/arm64];')
      && !failure() && !cancelled()
    steps:
      - name: Check whether 'Build Jemalloc [ubuntu-22.04/arm64]' did not fail
        run: 'false'
        if: |
          needs.build_jemalloc_ubuntu_22_04_arm64.result == 'skipped'
          && contains(inputs.necessary_jobs, ';Build Jemalloc [ubuntu-22.04/arm64];')

      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.4.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst

      - name: Fetch Jemalloc binary
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: jemalloc-bin-ubuntu-22.04-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "jemalloc"
          RUBY_PACKAGE_VERSION_ID: "3.4.7"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "jemalloc"
          VARIANT_PACKAGE_SUFFIX: "-jemalloc"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.4.7"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.4.7_ubuntu-22.04_jemalloc_arm64"
          ARTIFACT_PATH: output-jemalloc
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_4_7-malloctrim_amd64:
    name: 'Ruby [ubuntu-22.04/3.4.7/malloctrim/amd64]'

    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.4.7/malloctrim/amd64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.4.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "malloctrim"
          RUBY_PACKAGE_VERSION_ID: "3.4.7"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "malloctrim"
          VARIANT_PACKAGE_SUFFIX: "-malloctrim"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.4.7"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.4.7_ubuntu-22.04_malloctrim_amd64"
          ARTIFACT_PATH: output-malloctrim
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_4_7-malloctrim_arm64:
    name: 'Ruby [ubuntu-22.04/3.4.7/malloctrim/arm64]'

    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.4.7/malloctrim/arm64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.4.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "malloctrim"
          RUBY_PACKAGE_VERSION_ID: "3.4.7"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "malloctrim"
          VARIANT_PACKAGE_SUFFIX: "-malloctrim"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.4.7"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.4.7_ubuntu-22.04_malloctrim_arm64"
          ARTIFACT_PATH: output-malloctrim
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_3_9-normal_amd64:
    name: 'Ruby [ubuntu-22.04/3.3.9/normal/amd64]'

    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.3.9/normal/amd64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.3.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "normal"
          RUBY_PACKAGE_VERSION_ID: "3.3.9"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "normal"
          VARIANT_PACKAGE_SUFFIX: ""
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.3.9"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.3.9_ubuntu-22.04_normal_amd64"
          ARTIFACT_PATH: output-normal
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_3_9-normal_arm64:
    name: 'Ruby [ubuntu-22.04/3.3.9/normal/arm64]'

    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.3.9/normal/arm64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.3.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "normal"
          RUBY_PACKAGE_VERSION_ID: "3.3.9"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "normal"
          VARIANT_PACKAGE_SUFFIX: ""
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.3.9"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.3.9_ubuntu-22.04_normal_arm64"
          ARTIFACT_PATH: output-normal
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_3_9-jemalloc_amd64:
    name: 'Ruby [ubuntu-22.04/3.3.9/jemalloc/amd64]'

    needs: build_jemalloc_ubuntu_22_04_amd64
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.3.9/jemalloc/amd64];')
      && !failure() && !cancelled()
    steps:
      - name: Check whether 'Build Jemalloc [ubuntu-22.04/amd64]' did not fail
        run: 'false'
        if: |
          needs.build_jemalloc_ubuntu_22_04_amd64.result == 'skipped'
          && contains(inputs.necessary_jobs, ';Build Jemalloc [ubuntu-22.04/amd64];')

      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.3.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst

      - name: Fetch Jemalloc binary
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: jemalloc-bin-ubuntu-22.04-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "jemalloc"
          RUBY_PACKAGE_VERSION_ID: "3.3.9"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "jemalloc"
          VARIANT_PACKAGE_SUFFIX: "-jemalloc"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.3.9"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.3.9_ubuntu-22.04_jemalloc_amd64"
          ARTIFACT_PATH: output-jemalloc
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_3_9-jemalloc_arm64:
    name: 'Ruby [ubuntu-22.04/3.3.9/jemalloc/arm64]'

    needs: build_jemalloc_ubuntu_22_04_arm64
    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.3.9/jemalloc/arm64];')
      && !failure() && !cancelled()
    steps:
      - name: Check whether 'Build Jemalloc [ubuntu-22.04/arm64]' did not fail
        run: 'false'
        if: |
          needs.build_jemalloc_ubuntu_22_04_arm64.result == 'skipped'
          && contains(inputs.necessary_jobs, ';Build Jemalloc [ubuntu-22.04/arm64];')

      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.3.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst

      - name: Fetch Jemalloc binary
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: jemalloc-bin-ubuntu-22.04-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "jemalloc"
          RUBY_PACKAGE_VERSION_ID: "3.3.9"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "jemalloc"
          VARIANT_PACKAGE_SUFFIX: "-jemalloc"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.3.9"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.3.9_ubuntu-22.04_jemalloc_arm64"
          ARTIFACT_PATH: output-jemalloc
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_3_9-malloctrim_amd64:
    name: 'Ruby [ubuntu-22.04/3.3.9/malloctrim/amd64]'

    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.3.9/malloctrim/amd64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.3.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "malloctrim"
          RUBY_PACKAGE_VERSION_ID: "3.3.9"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "malloctrim"
          VARIANT_PACKAGE_SUFFIX: "-malloctrim"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.3.9"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.3.9_ubuntu-22.04_malloctrim_amd64"
          ARTIFACT_PATH: output-malloctrim
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_3_9-malloctrim_arm64:
    name: 'Ruby [ubuntu-22.04/3.3.9/malloctrim/arm64]'

    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.3.9/malloctrim/arm64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.3.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "malloctrim"
          RUBY_PACKAGE_VERSION_ID: "3.3.9"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "malloctrim"
          VARIANT_PACKAGE_SUFFIX: "-malloctrim"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.3.9"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.3.9_ubuntu-22.04_malloctrim_arm64"
          ARTIFACT_PATH: output-malloctrim
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_2_9-normal_amd64:
    name: 'Ruby [ubuntu-22.04/3.2.9/normal/amd64]'

    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.2.9/normal/amd64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.2.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "normal"
          RUBY_PACKAGE_VERSION_ID: "3.2.9"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "normal"
          VARIANT_PACKAGE_SUFFIX: ""
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.2.9"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.2.9_ubuntu-22.04_normal_amd64"
          ARTIFACT_PATH: output-normal
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_2_9-normal_arm64:
    name: 'Ruby [ubuntu-22.04/3.2.9/normal/arm64]'

    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.2.9/normal/arm64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.2.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "normal"
          RUBY_PACKAGE_VERSION_ID: "3.2.9"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "normal"
          VARIANT_PACKAGE_SUFFIX: ""
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.2.9"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.2.9_ubuntu-22.04_normal_arm64"
          ARTIFACT_PATH: output-normal
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_2_9-jemalloc_amd64:
    name: 'Ruby [ubuntu-22.04/3.2.9/jemalloc/amd64]'

    needs: build_jemalloc_ubuntu_22_04_amd64
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.2.9/jemalloc/amd64];')
      && !failure() && !cancelled()
    steps:
      - name: Check whether 'Build Jemalloc [ubuntu-22.04/amd64]' did not fail
        run: 'false'
        if: |
          needs.build_jemalloc_ubuntu_22_04_amd64.result == 'skipped'
          && contains(inputs.necessary_jobs, ';Build Jemalloc [ubuntu-22.04/amd64];')

      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.2.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst

      - name: Fetch Jemalloc binary
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: jemalloc-bin-ubuntu-22.04-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "jemalloc"
          RUBY_PACKAGE_VERSION_ID: "3.2.9"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "jemalloc"
          VARIANT_PACKAGE_SUFFIX: "-jemalloc"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.2.9"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.2.9_ubuntu-22.04_jemalloc_amd64"
          ARTIFACT_PATH: output-jemalloc
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_2_9-jemalloc_arm64:
    name: 'Ruby [ubuntu-22.04/3.2.9/jemalloc/arm64]'

    needs: build_jemalloc_ubuntu_22_04_arm64
    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.2.9/jemalloc/arm64];')
      && !failure() && !cancelled()
    steps:
      - name: Check whether 'Build Jemalloc [ubuntu-22.04/arm64]' did not fail
        run: 'false'
        if: |
          needs.build_jemalloc_ubuntu_22_04_arm64.result == 'skipped'
          && contains(inputs.necessary_jobs, ';Build Jemalloc [ubuntu-22.04/arm64];')

      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.2.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst

      - name: Fetch Jemalloc binary
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: jemalloc-bin-ubuntu-22.04-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "jemalloc"
          RUBY_PACKAGE_VERSION_ID: "3.2.9"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "jemalloc"
          VARIANT_PACKAGE_SUFFIX: "-jemalloc"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.2.9"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.2.9_ubuntu-22.04_jemalloc_arm64"
          ARTIFACT_PATH: output-jemalloc
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_2_9-malloctrim_amd64:
    name: 'Ruby [ubuntu-22.04/3.2.9/malloctrim/amd64]'

    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.2.9/malloctrim/amd64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.2.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "malloctrim"
          RUBY_PACKAGE_VERSION_ID: "3.2.9"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "malloctrim"
          VARIANT_PACKAGE_SUFFIX: "-malloctrim"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.2.9"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.2.9_ubuntu-22.04_malloctrim_amd64"
          ARTIFACT_PATH: output-malloctrim
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_2_9-malloctrim_arm64:
    name: 'Ruby [ubuntu-22.04/3.2.9/malloctrim/arm64]'

    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.2.9/malloctrim/arm64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.2.9
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "malloctrim"
          RUBY_PACKAGE_VERSION_ID: "3.2.9"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "malloctrim"
          VARIANT_PACKAGE_SUFFIX: "-malloctrim"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.2.9"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.2.9_ubuntu-22.04_malloctrim_arm64"
          ARTIFACT_PATH: output-malloctrim
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_1_7-normal_amd64:
    name: 'Ruby [ubuntu-22.04/3.1.7/normal/amd64]'

    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.1.7/normal/amd64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.1.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "normal"
          RUBY_PACKAGE_VERSION_ID: "3.1.7"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "normal"
          VARIANT_PACKAGE_SUFFIX: ""
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.1.7"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.1.7_ubuntu-22.04_normal_amd64"
          ARTIFACT_PATH: output-normal
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_1_7-normal_arm64:
    name: 'Ruby [ubuntu-22.04/3.1.7/normal/arm64]'

    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.1.7/normal/arm64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.1.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "normal"
          RUBY_PACKAGE_VERSION_ID: "3.1.7"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "normal"
          VARIANT_PACKAGE_SUFFIX: ""
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.1.7"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.1.7_ubuntu-22.04_normal_arm64"
          ARTIFACT_PATH: output-normal
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_1_7-jemalloc_amd64:
    name: 'Ruby [ubuntu-22.04/3.1.7/jemalloc/amd64]'

    needs: build_jemalloc_ubuntu_22_04_amd64
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.1.7/jemalloc/amd64];')
      && !failure() && !cancelled()
    steps:
      - name: Check whether 'Build Jemalloc [ubuntu-22.04/amd64]' did not fail
        run: 'false'
        if: |
          needs.build_jemalloc_ubuntu_22_04_amd64.result == 'skipped'
          && contains(inputs.necessary_jobs, ';Build Jemalloc [ubuntu-22.04/amd64];')

      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.1.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst

      - name: Fetch Jemalloc binary
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: jemalloc-bin-ubuntu-22.04-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "jemalloc"
          RUBY_PACKAGE_VERSION_ID: "3.1.7"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "jemalloc"
          VARIANT_PACKAGE_SUFFIX: "-jemalloc"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.1.7"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.1.7_ubuntu-22.04_jemalloc_amd64"
          ARTIFACT_PATH: output-jemalloc
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_1_7-jemalloc_arm64:
    name: 'Ruby [ubuntu-22.04/3.1.7/jemalloc/arm64]'

    needs: build_jemalloc_ubuntu_22_04_arm64
    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.1.7/jemalloc/arm64];')
      && !failure() && !cancelled()
    steps:
      - name: Check whether 'Build Jemalloc [ubuntu-22.04/arm64]' did not fail
        run: 'false'
        if: |
          needs.build_jemalloc_ubuntu_22_04_arm64.result == 'skipped'
          && contains(inputs.necessary_jobs, ';Build Jemalloc [ubuntu-22.04/arm64];')

      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.1.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst

      - name: Fetch Jemalloc binary
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: jemalloc-bin-ubuntu-22.04-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "jemalloc"
          RUBY_PACKAGE_VERSION_ID: "3.1.7"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "jemalloc"
          VARIANT_PACKAGE_SUFFIX: "-jemalloc"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.1.7"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.1.7_ubuntu-22.04_jemalloc_arm64"
          ARTIFACT_PATH: output-jemalloc
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_1_7-malloctrim_amd64:
    name: 'Ruby [ubuntu-22.04/3.1.7/malloctrim/amd64]'

    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.1.7/malloctrim/amd64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.1.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-amd64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-amd64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "malloctrim"
          RUBY_PACKAGE_VERSION_ID: "3.1.7"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/amd64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "malloctrim"
          VARIANT_PACKAGE_SUFFIX: "-malloctrim"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.1.7"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "amd64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.1.7_ubuntu-22.04_malloctrim_amd64"
          ARTIFACT_PATH: output-malloctrim
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

  build_ruby_ubuntu_22_04-3_1_7-malloctrim_arm64:
    name: 'Ruby [ubuntu-22.04/3.1.7/malloctrim/arm64]'

    runs-on: ubuntu-24.04-arm
    environment: test
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    # Run even if a dependent job has been skipped
    if: |
      contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.1.7/malloctrim/arm64];')
      && !failure() && !cancelled()
    steps:


      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Dump Azure connection string
        run: echo -n "$CONNECTION_STRING" > azure-connection-string.txt
        env:
          CONNECTION_STRING: ${{ secrets.AZURE_CI2_STORAGE_CONNECTION_STRING }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.1.7
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-22.04-arm64'
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image ubuntu-22.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: docker-image-utility-arm64
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst



      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-22.04"
          VARIANT_NAME: "malloctrim"
          RUBY_PACKAGE_VERSION_ID: "3.1.7"
          CACHE_KEY_PREFIX: "sccache/ubuntu-22.04/arm64"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-22.04"
          VARIANT_NAME: "malloctrim"
          VARIANT_PACKAGE_SUFFIX: "-malloctrim"
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.1.7"
          RUBY_PACKAGE_REVISION: "0"
          ARCH: "arm64"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.1.7_ubuntu-22.04_malloctrim_arm64"
          ARTIFACT_PATH: output-malloctrim
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}



  ### Finalize ###

  finalize:
    name: Finalize
    needs:

      - build_jemalloc_debian_11_amd64
      - build_jemalloc_debian_11_arm64

      - build_ruby_debian_11-3_4-normal_amd64
      - build_ruby_debian_11-3_4-normal_arm64
      - build_ruby_debian_11-3_4-jemalloc_amd64
      - build_ruby_debian_11-3_4-jemalloc_arm64
      - build_ruby_debian_11-3_4-malloctrim_amd64
      - build_ruby_debian_11-3_4-malloctrim_arm64

      - build_ruby_debian_11-3_3-normal_amd64
      - build_ruby_debian_11-3_3-normal_arm64
      - build_ruby_debian_11-3_3-jemalloc_amd64
      - build_ruby_debian_11-3_3-jemalloc_arm64
      - build_ruby_debian_11-3_3-malloctrim_amd64
      - build_ruby_debian_11-3_3-malloctrim_arm64

      - build_ruby_debian_11-3_2-normal_amd64
      - build_ruby_debian_11-3_2-normal_arm64
      - build_ruby_debian_11-3_2-jemalloc_amd64
      - build_ruby_debian_11-3_2-jemalloc_arm64
      - build_ruby_debian_11-3_2-malloctrim_amd64
      - build_ruby_debian_11-3_2-malloctrim_arm64

      - build_ruby_debian_11-3_1-normal_amd64
      - build_ruby_debian_11-3_1-normal_arm64
      - build_ruby_debian_11-3_1-jemalloc_amd64
      - build_ruby_debian_11-3_1-jemalloc_arm64
      - build_ruby_debian_11-3_1-malloctrim_amd64
      - build_ruby_debian_11-3_1-malloctrim_arm64

      - build_ruby_debian_11-3_4_7-normal_amd64
      - build_ruby_debian_11-3_4_7-normal_arm64
      - build_ruby_debian_11-3_4_7-jemalloc_amd64
      - build_ruby_debian_11-3_4_7-jemalloc_arm64
      - build_ruby_debian_11-3_4_7-malloctrim_amd64
      - build_ruby_debian_11-3_4_7-malloctrim_arm64

      - build_ruby_debian_11-3_3_9-normal_amd64
      - build_ruby_debian_11-3_3_9-normal_arm64
      - build_ruby_debian_11-3_3_9-jemalloc_amd64
      - build_ruby_debian_11-3_3_9-jemalloc_arm64
      - build_ruby_debian_11-3_3_9-malloctrim_amd64
      - build_ruby_debian_11-3_3_9-malloctrim_arm64

      - build_ruby_debian_11-3_2_9-normal_amd64
      - build_ruby_debian_11-3_2_9-normal_arm64
      - build_ruby_debian_11-3_2_9-jemalloc_amd64
      - build_ruby_debian_11-3_2_9-jemalloc_arm64
      - build_ruby_debian_11-3_2_9-malloctrim_amd64
      - build_ruby_debian_11-3_2_9-malloctrim_arm64

      - build_ruby_debian_11-3_1_7-normal_amd64
      - build_ruby_debian_11-3_1_7-normal_arm64
      - build_ruby_debian_11-3_1_7-jemalloc_amd64
      - build_ruby_debian_11-3_1_7-jemalloc_arm64
      - build_ruby_debian_11-3_1_7-malloctrim_amd64
      - build_ruby_debian_11-3_1_7-malloctrim_arm64

      - build_jemalloc_ubuntu_22_04_amd64
      - build_jemalloc_ubuntu_22_04_arm64

      - build_ruby_ubuntu_22_04-3_4-normal_amd64
      - build_ruby_ubuntu_22_04-3_4-normal_arm64
      - build_ruby_ubuntu_22_04-3_4-jemalloc_amd64
      - build_ruby_ubuntu_22_04-3_4-jemalloc_arm64
      - build_ruby_ubuntu_22_04-3_4-malloctrim_amd64
      - build_ruby_ubuntu_22_04-3_4-malloctrim_arm64

      - build_ruby_ubuntu_22_04-3_3-normal_amd64
      - build_ruby_ubuntu_22_04-3_3-normal_arm64
      - build_ruby_ubuntu_22_04-3_3-jemalloc_amd64
      - build_ruby_ubuntu_22_04-3_3-jemalloc_arm64
      - build_ruby_ubuntu_22_04-3_3-malloctrim_amd64
      - build_ruby_ubuntu_22_04-3_3-malloctrim_arm64

      - build_ruby_ubuntu_22_04-3_2-normal_amd64
      - build_ruby_ubuntu_22_04-3_2-normal_arm64
      - build_ruby_ubuntu_22_04-3_2-jemalloc_amd64
      - build_ruby_ubuntu_22_04-3_2-jemalloc_arm64
      - build_ruby_ubuntu_22_04-3_2-malloctrim_amd64
      - build_ruby_ubuntu_22_04-3_2-malloctrim_arm64

      - build_ruby_ubuntu_22_04-3_1-normal_amd64
      - build_ruby_ubuntu_22_04-3_1-normal_arm64
      - build_ruby_ubuntu_22_04-3_1-jemalloc_amd64
      - build_ruby_ubuntu_22_04-3_1-jemalloc_arm64
      - build_ruby_ubuntu_22_04-3_1-malloctrim_amd64
      - build_ruby_ubuntu_22_04-3_1-malloctrim_arm64

      - build_ruby_ubuntu_22_04-3_4_7-normal_amd64
      - build_ruby_ubuntu_22_04-3_4_7-normal_arm64
      - build_ruby_ubuntu_22_04-3_4_7-jemalloc_amd64
      - build_ruby_ubuntu_22_04-3_4_7-jemalloc_arm64
      - build_ruby_ubuntu_22_04-3_4_7-malloctrim_amd64
      - build_ruby_ubuntu_22_04-3_4_7-malloctrim_arm64

      - build_ruby_ubuntu_22_04-3_3_9-normal_amd64
      - build_ruby_ubuntu_22_04-3_3_9-normal_arm64
      - build_ruby_ubuntu_22_04-3_3_9-jemalloc_amd64
      - build_ruby_ubuntu_22_04-3_3_9-jemalloc_arm64
      - build_ruby_ubuntu_22_04-3_3_9-malloctrim_amd64
      - build_ruby_ubuntu_22_04-3_3_9-malloctrim_arm64

      - build_ruby_ubuntu_22_04-3_2_9-normal_amd64
      - build_ruby_ubuntu_22_04-3_2_9-normal_arm64
      - build_ruby_ubuntu_22_04-3_2_9-jemalloc_amd64
      - build_ruby_ubuntu_22_04-3_2_9-jemalloc_arm64
      - build_ruby_ubuntu_22_04-3_2_9-malloctrim_amd64
      - build_ruby_ubuntu_22_04-3_2_9-malloctrim_arm64

      - build_ruby_ubuntu_22_04-3_1_7-normal_amd64
      - build_ruby_ubuntu_22_04-3_1_7-normal_arm64
      - build_ruby_ubuntu_22_04-3_1_7-jemalloc_amd64
      - build_ruby_ubuntu_22_04-3_1_7-jemalloc_arm64
      - build_ruby_ubuntu_22_04-3_1_7-malloctrim_amd64
      - build_ruby_ubuntu_22_04-3_1_7-malloctrim_arm64
    runs-on: ubuntu-24.04
    environment: test
    timeout-minutes: 30
    if: 'always()'
    permissions:
      id-token: write
    steps:
      - uses: actions/checkout@v5
      - uses: google-github-actions/auth@v3
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          version: '>= 363.0.0'


      ### Publish all artifacts in Google Cloud as Github Actions artifacts ###
      # We publish these artifacts in a dedicated job instead
      # of in each job individually, because the individual jobs
      # could be skipped during a re-run.

      - name: Download Jemalloc binary artifacts from Google Cloud
        run: ./internal-scripts/ci-cd/download-artifacts.sh
        env:
          ARTIFACT_NAMES: |
            jemalloc-bin-debian-11-amd64
            jemalloc-bin-debian-11-arm64
            jemalloc-bin-ubuntu-22.04-amd64
            jemalloc-bin-ubuntu-22.04-arm64
          ARTIFACT_PATH: artifacts
          CLEAR: true
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Archive Jemalloc binary artifact [debian-11/amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: 'jemalloc-bin-debian-11-amd64'
          path: 'artifacts/jemalloc-bin-debian-11-amd64'
          compression-level: 0
      - name: Archive Jemalloc binary artifact [debian-11/arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: 'jemalloc-bin-debian-11-arm64'
          path: 'artifacts/jemalloc-bin-debian-11-arm64'
          compression-level: 0
      - name: Archive Jemalloc binary artifact [ubuntu-22.04/amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: 'jemalloc-bin-ubuntu-22.04-amd64'
          path: 'artifacts/jemalloc-bin-ubuntu-22.04-amd64'
          compression-level: 0
      - name: Archive Jemalloc binary artifact [ubuntu-22.04/arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: 'jemalloc-bin-ubuntu-22.04-arm64'
          path: 'artifacts/jemalloc-bin-ubuntu-22.04-arm64'
          compression-level: 0

      - name: Download Ruby package artifacts from Google Cloud
        run: ./internal-scripts/ci-cd/download-artifacts.sh
        env:
          ARTIFACT_NAMES: 'ruby-pkg_3.4_debian-11_normal_amd64 ruby-pkg_3.4_debian-11_normal_arm64 ruby-pkg_3.4_debian-11_jemalloc_amd64 ruby-pkg_3.4_debian-11_jemalloc_arm64 ruby-pkg_3.4_debian-11_malloctrim_amd64 ruby-pkg_3.4_debian-11_malloctrim_arm64 ruby-pkg_3.3_debian-11_normal_amd64 ruby-pkg_3.3_debian-11_normal_arm64 ruby-pkg_3.3_debian-11_jemalloc_amd64 ruby-pkg_3.3_debian-11_jemalloc_arm64 ruby-pkg_3.3_debian-11_malloctrim_amd64 ruby-pkg_3.3_debian-11_malloctrim_arm64 ruby-pkg_3.2_debian-11_normal_amd64 ruby-pkg_3.2_debian-11_normal_arm64 ruby-pkg_3.2_debian-11_jemalloc_amd64 ruby-pkg_3.2_debian-11_jemalloc_arm64 ruby-pkg_3.2_debian-11_malloctrim_amd64 ruby-pkg_3.2_debian-11_malloctrim_arm64 ruby-pkg_3.1_debian-11_normal_amd64 ruby-pkg_3.1_debian-11_normal_arm64 ruby-pkg_3.1_debian-11_jemalloc_amd64 ruby-pkg_3.1_debian-11_jemalloc_arm64 ruby-pkg_3.1_debian-11_malloctrim_amd64 ruby-pkg_3.1_debian-11_malloctrim_arm64 ruby-pkg_3.4.7_debian-11_normal_amd64 ruby-pkg_3.4.7_debian-11_normal_arm64 ruby-pkg_3.4.7_debian-11_jemalloc_amd64 ruby-pkg_3.4.7_debian-11_jemalloc_arm64 ruby-pkg_3.4.7_debian-11_malloctrim_amd64 ruby-pkg_3.4.7_debian-11_malloctrim_arm64 ruby-pkg_3.3.9_debian-11_normal_amd64 ruby-pkg_3.3.9_debian-11_normal_arm64 ruby-pkg_3.3.9_debian-11_jemalloc_amd64 ruby-pkg_3.3.9_debian-11_jemalloc_arm64 ruby-pkg_3.3.9_debian-11_malloctrim_amd64 ruby-pkg_3.3.9_debian-11_malloctrim_arm64 ruby-pkg_3.2.9_debian-11_normal_amd64 ruby-pkg_3.2.9_debian-11_normal_arm64 ruby-pkg_3.2.9_debian-11_jemalloc_amd64 ruby-pkg_3.2.9_debian-11_jemalloc_arm64 ruby-pkg_3.2.9_debian-11_malloctrim_amd64 ruby-pkg_3.2.9_debian-11_malloctrim_arm64 ruby-pkg_3.1.7_debian-11_normal_amd64 ruby-pkg_3.1.7_debian-11_normal_arm64 ruby-pkg_3.1.7_debian-11_jemalloc_amd64 ruby-pkg_3.1.7_debian-11_jemalloc_arm64 ruby-pkg_3.1.7_debian-11_malloctrim_amd64 ruby-pkg_3.1.7_debian-11_malloctrim_arm64 ruby-pkg_3.4_ubuntu-22.04_normal_amd64 ruby-pkg_3.4_ubuntu-22.04_normal_arm64 ruby-pkg_3.4_ubuntu-22.04_jemalloc_amd64 ruby-pkg_3.4_ubuntu-22.04_jemalloc_arm64 ruby-pkg_3.4_ubuntu-22.04_malloctrim_amd64 ruby-pkg_3.4_ubuntu-22.04_malloctrim_arm64 ruby-pkg_3.3_ubuntu-22.04_normal_amd64 ruby-pkg_3.3_ubuntu-22.04_normal_arm64 ruby-pkg_3.3_ubuntu-22.04_jemalloc_amd64 ruby-pkg_3.3_ubuntu-22.04_jemalloc_arm64 ruby-pkg_3.3_ubuntu-22.04_malloctrim_amd64 ruby-pkg_3.3_ubuntu-22.04_malloctrim_arm64 ruby-pkg_3.2_ubuntu-22.04_normal_amd64 ruby-pkg_3.2_ubuntu-22.04_normal_arm64 ruby-pkg_3.2_ubuntu-22.04_jemalloc_amd64 ruby-pkg_3.2_ubuntu-22.04_jemalloc_arm64 ruby-pkg_3.2_ubuntu-22.04_malloctrim_amd64 ruby-pkg_3.2_ubuntu-22.04_malloctrim_arm64 ruby-pkg_3.1_ubuntu-22.04_normal_amd64 ruby-pkg_3.1_ubuntu-22.04_normal_arm64 ruby-pkg_3.1_ubuntu-22.04_jemalloc_amd64 ruby-pkg_3.1_ubuntu-22.04_jemalloc_arm64 ruby-pkg_3.1_ubuntu-22.04_malloctrim_amd64 ruby-pkg_3.1_ubuntu-22.04_malloctrim_arm64 ruby-pkg_3.4.7_ubuntu-22.04_normal_amd64 ruby-pkg_3.4.7_ubuntu-22.04_normal_arm64 ruby-pkg_3.4.7_ubuntu-22.04_jemalloc_amd64 ruby-pkg_3.4.7_ubuntu-22.04_jemalloc_arm64 ruby-pkg_3.4.7_ubuntu-22.04_malloctrim_amd64 ruby-pkg_3.4.7_ubuntu-22.04_malloctrim_arm64 ruby-pkg_3.3.9_ubuntu-22.04_normal_amd64 ruby-pkg_3.3.9_ubuntu-22.04_normal_arm64 ruby-pkg_3.3.9_ubuntu-22.04_jemalloc_amd64 ruby-pkg_3.3.9_ubuntu-22.04_jemalloc_arm64 ruby-pkg_3.3.9_ubuntu-22.04_malloctrim_amd64 ruby-pkg_3.3.9_ubuntu-22.04_malloctrim_arm64 ruby-pkg_3.2.9_ubuntu-22.04_normal_amd64 ruby-pkg_3.2.9_ubuntu-22.04_normal_arm64 ruby-pkg_3.2.9_ubuntu-22.04_jemalloc_amd64 ruby-pkg_3.2.9_ubuntu-22.04_jemalloc_arm64 ruby-pkg_3.2.9_ubuntu-22.04_malloctrim_amd64 ruby-pkg_3.2.9_ubuntu-22.04_malloctrim_arm64 ruby-pkg_3.1.7_ubuntu-22.04_normal_amd64 ruby-pkg_3.1.7_ubuntu-22.04_normal_arm64 ruby-pkg_3.1.7_ubuntu-22.04_jemalloc_amd64 ruby-pkg_3.1.7_ubuntu-22.04_jemalloc_arm64 ruby-pkg_3.1.7_ubuntu-22.04_malloctrim_amd64 ruby-pkg_3.1.7_ubuntu-22.04_malloctrim_arm64'
          ARTIFACT_PATH: artifacts
          CLEAR: true
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Archive Ruby package artifact [ruby-pkg_3.4_debian-11_normal_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.4_debian-11_normal_amd64
          path: artifacts/ruby-pkg_3.4_debian-11_normal_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.4_debian-11_normal_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.4_debian-11_normal_arm64
          path: artifacts/ruby-pkg_3.4_debian-11_normal_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.4_debian-11_jemalloc_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.4_debian-11_jemalloc_amd64
          path: artifacts/ruby-pkg_3.4_debian-11_jemalloc_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.4_debian-11_jemalloc_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.4_debian-11_jemalloc_arm64
          path: artifacts/ruby-pkg_3.4_debian-11_jemalloc_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.4_debian-11_malloctrim_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.4_debian-11_malloctrim_amd64
          path: artifacts/ruby-pkg_3.4_debian-11_malloctrim_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.4_debian-11_malloctrim_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.4_debian-11_malloctrim_arm64
          path: artifacts/ruby-pkg_3.4_debian-11_malloctrim_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.3_debian-11_normal_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.3_debian-11_normal_amd64
          path: artifacts/ruby-pkg_3.3_debian-11_normal_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.3_debian-11_normal_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.3_debian-11_normal_arm64
          path: artifacts/ruby-pkg_3.3_debian-11_normal_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.3_debian-11_jemalloc_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.3_debian-11_jemalloc_amd64
          path: artifacts/ruby-pkg_3.3_debian-11_jemalloc_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.3_debian-11_jemalloc_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.3_debian-11_jemalloc_arm64
          path: artifacts/ruby-pkg_3.3_debian-11_jemalloc_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.3_debian-11_malloctrim_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.3_debian-11_malloctrim_amd64
          path: artifacts/ruby-pkg_3.3_debian-11_malloctrim_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.3_debian-11_malloctrim_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.3_debian-11_malloctrim_arm64
          path: artifacts/ruby-pkg_3.3_debian-11_malloctrim_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.2_debian-11_normal_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.2_debian-11_normal_amd64
          path: artifacts/ruby-pkg_3.2_debian-11_normal_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.2_debian-11_normal_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.2_debian-11_normal_arm64
          path: artifacts/ruby-pkg_3.2_debian-11_normal_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.2_debian-11_jemalloc_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.2_debian-11_jemalloc_amd64
          path: artifacts/ruby-pkg_3.2_debian-11_jemalloc_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.2_debian-11_jemalloc_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.2_debian-11_jemalloc_arm64
          path: artifacts/ruby-pkg_3.2_debian-11_jemalloc_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.2_debian-11_malloctrim_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.2_debian-11_malloctrim_amd64
          path: artifacts/ruby-pkg_3.2_debian-11_malloctrim_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.2_debian-11_malloctrim_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.2_debian-11_malloctrim_arm64
          path: artifacts/ruby-pkg_3.2_debian-11_malloctrim_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.1_debian-11_normal_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.1_debian-11_normal_amd64
          path: artifacts/ruby-pkg_3.1_debian-11_normal_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.1_debian-11_normal_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.1_debian-11_normal_arm64
          path: artifacts/ruby-pkg_3.1_debian-11_normal_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.1_debian-11_jemalloc_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.1_debian-11_jemalloc_amd64
          path: artifacts/ruby-pkg_3.1_debian-11_jemalloc_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.1_debian-11_jemalloc_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.1_debian-11_jemalloc_arm64
          path: artifacts/ruby-pkg_3.1_debian-11_jemalloc_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.1_debian-11_malloctrim_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.1_debian-11_malloctrim_amd64
          path: artifacts/ruby-pkg_3.1_debian-11_malloctrim_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.1_debian-11_malloctrim_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.1_debian-11_malloctrim_arm64
          path: artifacts/ruby-pkg_3.1_debian-11_malloctrim_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.4.7_debian-11_normal_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.4.7_debian-11_normal_amd64
          path: artifacts/ruby-pkg_3.4.7_debian-11_normal_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.4.7_debian-11_normal_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.4.7_debian-11_normal_arm64
          path: artifacts/ruby-pkg_3.4.7_debian-11_normal_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.4.7_debian-11_jemalloc_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.4.7_debian-11_jemalloc_amd64
          path: artifacts/ruby-pkg_3.4.7_debian-11_jemalloc_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.4.7_debian-11_jemalloc_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.4.7_debian-11_jemalloc_arm64
          path: artifacts/ruby-pkg_3.4.7_debian-11_jemalloc_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.4.7_debian-11_malloctrim_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.4.7_debian-11_malloctrim_amd64
          path: artifacts/ruby-pkg_3.4.7_debian-11_malloctrim_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.4.7_debian-11_malloctrim_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.4.7_debian-11_malloctrim_arm64
          path: artifacts/ruby-pkg_3.4.7_debian-11_malloctrim_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.3.9_debian-11_normal_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.3.9_debian-11_normal_amd64
          path: artifacts/ruby-pkg_3.3.9_debian-11_normal_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.3.9_debian-11_normal_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.3.9_debian-11_normal_arm64
          path: artifacts/ruby-pkg_3.3.9_debian-11_normal_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.3.9_debian-11_jemalloc_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.3.9_debian-11_jemalloc_amd64
          path: artifacts/ruby-pkg_3.3.9_debian-11_jemalloc_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.3.9_debian-11_jemalloc_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.3.9_debian-11_jemalloc_arm64
          path: artifacts/ruby-pkg_3.3.9_debian-11_jemalloc_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.3.9_debian-11_malloctrim_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.3.9_debian-11_malloctrim_amd64
          path: artifacts/ruby-pkg_3.3.9_debian-11_malloctrim_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.3.9_debian-11_malloctrim_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.3.9_debian-11_malloctrim_arm64
          path: artifacts/ruby-pkg_3.3.9_debian-11_malloctrim_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.2.9_debian-11_normal_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.2.9_debian-11_normal_amd64
          path: artifacts/ruby-pkg_3.2.9_debian-11_normal_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.2.9_debian-11_normal_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.2.9_debian-11_normal_arm64
          path: artifacts/ruby-pkg_3.2.9_debian-11_normal_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.2.9_debian-11_jemalloc_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.2.9_debian-11_jemalloc_amd64
          path: artifacts/ruby-pkg_3.2.9_debian-11_jemalloc_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.2.9_debian-11_jemalloc_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.2.9_debian-11_jemalloc_arm64
          path: artifacts/ruby-pkg_3.2.9_debian-11_jemalloc_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.2.9_debian-11_malloctrim_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.2.9_debian-11_malloctrim_amd64
          path: artifacts/ruby-pkg_3.2.9_debian-11_malloctrim_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.2.9_debian-11_malloctrim_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.2.9_debian-11_malloctrim_arm64
          path: artifacts/ruby-pkg_3.2.9_debian-11_malloctrim_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.1.7_debian-11_normal_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.1.7_debian-11_normal_amd64
          path: artifacts/ruby-pkg_3.1.7_debian-11_normal_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.1.7_debian-11_normal_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.1.7_debian-11_normal_arm64
          path: artifacts/ruby-pkg_3.1.7_debian-11_normal_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.1.7_debian-11_jemalloc_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.1.7_debian-11_jemalloc_amd64
          path: artifacts/ruby-pkg_3.1.7_debian-11_jemalloc_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.1.7_debian-11_jemalloc_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.1.7_debian-11_jemalloc_arm64
          path: artifacts/ruby-pkg_3.1.7_debian-11_jemalloc_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.1.7_debian-11_malloctrim_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.1.7_debian-11_malloctrim_amd64
          path: artifacts/ruby-pkg_3.1.7_debian-11_malloctrim_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.1.7_debian-11_malloctrim_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.1.7_debian-11_malloctrim_arm64
          path: artifacts/ruby-pkg_3.1.7_debian-11_malloctrim_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.4_ubuntu-22.04_normal_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.4_ubuntu-22.04_normal_amd64
          path: artifacts/ruby-pkg_3.4_ubuntu-22.04_normal_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.4_ubuntu-22.04_normal_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.4_ubuntu-22.04_normal_arm64
          path: artifacts/ruby-pkg_3.4_ubuntu-22.04_normal_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.4_ubuntu-22.04_jemalloc_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.4_ubuntu-22.04_jemalloc_amd64
          path: artifacts/ruby-pkg_3.4_ubuntu-22.04_jemalloc_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.4_ubuntu-22.04_jemalloc_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.4_ubuntu-22.04_jemalloc_arm64
          path: artifacts/ruby-pkg_3.4_ubuntu-22.04_jemalloc_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.4_ubuntu-22.04_malloctrim_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.4_ubuntu-22.04_malloctrim_amd64
          path: artifacts/ruby-pkg_3.4_ubuntu-22.04_malloctrim_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.4_ubuntu-22.04_malloctrim_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.4_ubuntu-22.04_malloctrim_arm64
          path: artifacts/ruby-pkg_3.4_ubuntu-22.04_malloctrim_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.3_ubuntu-22.04_normal_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.3_ubuntu-22.04_normal_amd64
          path: artifacts/ruby-pkg_3.3_ubuntu-22.04_normal_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.3_ubuntu-22.04_normal_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.3_ubuntu-22.04_normal_arm64
          path: artifacts/ruby-pkg_3.3_ubuntu-22.04_normal_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.3_ubuntu-22.04_jemalloc_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.3_ubuntu-22.04_jemalloc_amd64
          path: artifacts/ruby-pkg_3.3_ubuntu-22.04_jemalloc_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.3_ubuntu-22.04_jemalloc_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.3_ubuntu-22.04_jemalloc_arm64
          path: artifacts/ruby-pkg_3.3_ubuntu-22.04_jemalloc_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.3_ubuntu-22.04_malloctrim_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.3_ubuntu-22.04_malloctrim_amd64
          path: artifacts/ruby-pkg_3.3_ubuntu-22.04_malloctrim_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.3_ubuntu-22.04_malloctrim_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.3_ubuntu-22.04_malloctrim_arm64
          path: artifacts/ruby-pkg_3.3_ubuntu-22.04_malloctrim_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.2_ubuntu-22.04_normal_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.2_ubuntu-22.04_normal_amd64
          path: artifacts/ruby-pkg_3.2_ubuntu-22.04_normal_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.2_ubuntu-22.04_normal_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.2_ubuntu-22.04_normal_arm64
          path: artifacts/ruby-pkg_3.2_ubuntu-22.04_normal_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.2_ubuntu-22.04_jemalloc_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.2_ubuntu-22.04_jemalloc_amd64
          path: artifacts/ruby-pkg_3.2_ubuntu-22.04_jemalloc_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.2_ubuntu-22.04_jemalloc_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.2_ubuntu-22.04_jemalloc_arm64
          path: artifacts/ruby-pkg_3.2_ubuntu-22.04_jemalloc_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.2_ubuntu-22.04_malloctrim_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.2_ubuntu-22.04_malloctrim_amd64
          path: artifacts/ruby-pkg_3.2_ubuntu-22.04_malloctrim_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.2_ubuntu-22.04_malloctrim_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.2_ubuntu-22.04_malloctrim_arm64
          path: artifacts/ruby-pkg_3.2_ubuntu-22.04_malloctrim_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.1_ubuntu-22.04_normal_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.1_ubuntu-22.04_normal_amd64
          path: artifacts/ruby-pkg_3.1_ubuntu-22.04_normal_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.1_ubuntu-22.04_normal_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.1_ubuntu-22.04_normal_arm64
          path: artifacts/ruby-pkg_3.1_ubuntu-22.04_normal_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.1_ubuntu-22.04_jemalloc_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.1_ubuntu-22.04_jemalloc_amd64
          path: artifacts/ruby-pkg_3.1_ubuntu-22.04_jemalloc_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.1_ubuntu-22.04_jemalloc_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.1_ubuntu-22.04_jemalloc_arm64
          path: artifacts/ruby-pkg_3.1_ubuntu-22.04_jemalloc_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.1_ubuntu-22.04_malloctrim_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.1_ubuntu-22.04_malloctrim_amd64
          path: artifacts/ruby-pkg_3.1_ubuntu-22.04_malloctrim_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.1_ubuntu-22.04_malloctrim_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.1_ubuntu-22.04_malloctrim_arm64
          path: artifacts/ruby-pkg_3.1_ubuntu-22.04_malloctrim_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.4.7_ubuntu-22.04_normal_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.4.7_ubuntu-22.04_normal_amd64
          path: artifacts/ruby-pkg_3.4.7_ubuntu-22.04_normal_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.4.7_ubuntu-22.04_normal_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.4.7_ubuntu-22.04_normal_arm64
          path: artifacts/ruby-pkg_3.4.7_ubuntu-22.04_normal_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.4.7_ubuntu-22.04_jemalloc_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.4.7_ubuntu-22.04_jemalloc_amd64
          path: artifacts/ruby-pkg_3.4.7_ubuntu-22.04_jemalloc_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.4.7_ubuntu-22.04_jemalloc_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.4.7_ubuntu-22.04_jemalloc_arm64
          path: artifacts/ruby-pkg_3.4.7_ubuntu-22.04_jemalloc_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.4.7_ubuntu-22.04_malloctrim_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.4.7_ubuntu-22.04_malloctrim_amd64
          path: artifacts/ruby-pkg_3.4.7_ubuntu-22.04_malloctrim_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.4.7_ubuntu-22.04_malloctrim_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.4.7_ubuntu-22.04_malloctrim_arm64
          path: artifacts/ruby-pkg_3.4.7_ubuntu-22.04_malloctrim_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.3.9_ubuntu-22.04_normal_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.3.9_ubuntu-22.04_normal_amd64
          path: artifacts/ruby-pkg_3.3.9_ubuntu-22.04_normal_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.3.9_ubuntu-22.04_normal_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.3.9_ubuntu-22.04_normal_arm64
          path: artifacts/ruby-pkg_3.3.9_ubuntu-22.04_normal_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.3.9_ubuntu-22.04_jemalloc_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.3.9_ubuntu-22.04_jemalloc_amd64
          path: artifacts/ruby-pkg_3.3.9_ubuntu-22.04_jemalloc_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.3.9_ubuntu-22.04_jemalloc_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.3.9_ubuntu-22.04_jemalloc_arm64
          path: artifacts/ruby-pkg_3.3.9_ubuntu-22.04_jemalloc_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.3.9_ubuntu-22.04_malloctrim_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.3.9_ubuntu-22.04_malloctrim_amd64
          path: artifacts/ruby-pkg_3.3.9_ubuntu-22.04_malloctrim_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.3.9_ubuntu-22.04_malloctrim_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.3.9_ubuntu-22.04_malloctrim_arm64
          path: artifacts/ruby-pkg_3.3.9_ubuntu-22.04_malloctrim_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.2.9_ubuntu-22.04_normal_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.2.9_ubuntu-22.04_normal_amd64
          path: artifacts/ruby-pkg_3.2.9_ubuntu-22.04_normal_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.2.9_ubuntu-22.04_normal_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.2.9_ubuntu-22.04_normal_arm64
          path: artifacts/ruby-pkg_3.2.9_ubuntu-22.04_normal_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.2.9_ubuntu-22.04_jemalloc_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.2.9_ubuntu-22.04_jemalloc_amd64
          path: artifacts/ruby-pkg_3.2.9_ubuntu-22.04_jemalloc_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.2.9_ubuntu-22.04_jemalloc_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.2.9_ubuntu-22.04_jemalloc_arm64
          path: artifacts/ruby-pkg_3.2.9_ubuntu-22.04_jemalloc_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.2.9_ubuntu-22.04_malloctrim_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.2.9_ubuntu-22.04_malloctrim_amd64
          path: artifacts/ruby-pkg_3.2.9_ubuntu-22.04_malloctrim_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.2.9_ubuntu-22.04_malloctrim_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.2.9_ubuntu-22.04_malloctrim_arm64
          path: artifacts/ruby-pkg_3.2.9_ubuntu-22.04_malloctrim_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.1.7_ubuntu-22.04_normal_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.1.7_ubuntu-22.04_normal_amd64
          path: artifacts/ruby-pkg_3.1.7_ubuntu-22.04_normal_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.1.7_ubuntu-22.04_normal_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.1.7_ubuntu-22.04_normal_arm64
          path: artifacts/ruby-pkg_3.1.7_ubuntu-22.04_normal_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.1.7_ubuntu-22.04_jemalloc_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.1.7_ubuntu-22.04_jemalloc_amd64
          path: artifacts/ruby-pkg_3.1.7_ubuntu-22.04_jemalloc_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.1.7_ubuntu-22.04_jemalloc_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.1.7_ubuntu-22.04_jemalloc_arm64
          path: artifacts/ruby-pkg_3.1.7_ubuntu-22.04_jemalloc_arm64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.1.7_ubuntu-22.04_malloctrim_amd64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.1.7_ubuntu-22.04_malloctrim_amd64
          path: artifacts/ruby-pkg_3.1.7_ubuntu-22.04_malloctrim_amd64
          compression-level: 0
      - name: Archive Ruby package artifact [ruby-pkg_3.1.7_ubuntu-22.04_malloctrim_arm64] to Github
        uses: actions/upload-artifact@v4
        with:
          name: ruby-pkg_3.1.7_ubuntu-22.04_malloctrim_arm64
          path: artifacts/ruby-pkg_3.1.7_ubuntu-22.04_malloctrim_arm64
          compression-level: 0


      ### Check whether dependent jobs failed ###

      - name: Check whether 'Jemalloc' job did not fail
        run: 'false'
        if: |
          false
            || (needs.build_jemalloc_debian_11_amd64.result != 'success'
              && (needs.build_jemalloc_debian_11_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Jemalloc [debian-11/amd64];')))
            || (needs.build_jemalloc_debian_11_arm64.result != 'success'
              && (needs.build_jemalloc_debian_11_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Jemalloc [debian-11/arm64];')))
            || (needs.build_jemalloc_ubuntu_22_04_amd64.result != 'success'
              && (needs.build_jemalloc_ubuntu_22_04_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Jemalloc [ubuntu-22.04/amd64];')))
            || (needs.build_jemalloc_ubuntu_22_04_arm64.result != 'success'
              && (needs.build_jemalloc_ubuntu_22_04_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Jemalloc [ubuntu-22.04/arm64];')))
      - name: Check whether 'Ruby [debian-11]' job did not fail
        run: 'false'
        if: |
          false
            || (needs.build_ruby_debian_11-3_4-normal_amd64.result != 'success'
              && (needs.build_ruby_debian_11-3_4-normal_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.4/normal];')))
            || (needs.build_ruby_debian_11-3_4-normal_arm64.result != 'success'
              && (needs.build_ruby_debian_11-3_4-normal_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.4/normal];')))
            || (needs.build_ruby_debian_11-3_4-jemalloc_amd64.result != 'success'
              && (needs.build_ruby_debian_11-3_4-jemalloc_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.4/jemalloc];')))
            || (needs.build_ruby_debian_11-3_4-jemalloc_arm64.result != 'success'
              && (needs.build_ruby_debian_11-3_4-jemalloc_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.4/jemalloc];')))
            || (needs.build_ruby_debian_11-3_4-malloctrim_amd64.result != 'success'
              && (needs.build_ruby_debian_11-3_4-malloctrim_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.4/malloctrim];')))
            || (needs.build_ruby_debian_11-3_4-malloctrim_arm64.result != 'success'
              && (needs.build_ruby_debian_11-3_4-malloctrim_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.4/malloctrim];')))
            || (needs.build_ruby_debian_11-3_3-normal_amd64.result != 'success'
              && (needs.build_ruby_debian_11-3_3-normal_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.3/normal];')))
            || (needs.build_ruby_debian_11-3_3-normal_arm64.result != 'success'
              && (needs.build_ruby_debian_11-3_3-normal_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.3/normal];')))
            || (needs.build_ruby_debian_11-3_3-jemalloc_amd64.result != 'success'
              && (needs.build_ruby_debian_11-3_3-jemalloc_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.3/jemalloc];')))
            || (needs.build_ruby_debian_11-3_3-jemalloc_arm64.result != 'success'
              && (needs.build_ruby_debian_11-3_3-jemalloc_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.3/jemalloc];')))
            || (needs.build_ruby_debian_11-3_3-malloctrim_amd64.result != 'success'
              && (needs.build_ruby_debian_11-3_3-malloctrim_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.3/malloctrim];')))
            || (needs.build_ruby_debian_11-3_3-malloctrim_arm64.result != 'success'
              && (needs.build_ruby_debian_11-3_3-malloctrim_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.3/malloctrim];')))
            || (needs.build_ruby_debian_11-3_2-normal_amd64.result != 'success'
              && (needs.build_ruby_debian_11-3_2-normal_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.2/normal];')))
            || (needs.build_ruby_debian_11-3_2-normal_arm64.result != 'success'
              && (needs.build_ruby_debian_11-3_2-normal_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.2/normal];')))
            || (needs.build_ruby_debian_11-3_2-jemalloc_amd64.result != 'success'
              && (needs.build_ruby_debian_11-3_2-jemalloc_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.2/jemalloc];')))
            || (needs.build_ruby_debian_11-3_2-jemalloc_arm64.result != 'success'
              && (needs.build_ruby_debian_11-3_2-jemalloc_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.2/jemalloc];')))
            || (needs.build_ruby_debian_11-3_2-malloctrim_amd64.result != 'success'
              && (needs.build_ruby_debian_11-3_2-malloctrim_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.2/malloctrim];')))
            || (needs.build_ruby_debian_11-3_2-malloctrim_arm64.result != 'success'
              && (needs.build_ruby_debian_11-3_2-malloctrim_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.2/malloctrim];')))
            || (needs.build_ruby_debian_11-3_1-normal_amd64.result != 'success'
              && (needs.build_ruby_debian_11-3_1-normal_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.1/normal];')))
            || (needs.build_ruby_debian_11-3_1-normal_arm64.result != 'success'
              && (needs.build_ruby_debian_11-3_1-normal_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.1/normal];')))
            || (needs.build_ruby_debian_11-3_1-jemalloc_amd64.result != 'success'
              && (needs.build_ruby_debian_11-3_1-jemalloc_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.1/jemalloc];')))
            || (needs.build_ruby_debian_11-3_1-jemalloc_arm64.result != 'success'
              && (needs.build_ruby_debian_11-3_1-jemalloc_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.1/jemalloc];')))
            || (needs.build_ruby_debian_11-3_1-malloctrim_amd64.result != 'success'
              && (needs.build_ruby_debian_11-3_1-malloctrim_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.1/malloctrim];')))
            || (needs.build_ruby_debian_11-3_1-malloctrim_arm64.result != 'success'
              && (needs.build_ruby_debian_11-3_1-malloctrim_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.1/malloctrim];')))
            || (needs.build_ruby_debian_11-3_4_7-normal_amd64.result != 'success'
              && (needs.build_ruby_debian_11-3_4_7-normal_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.4.7/normal];')))
            || (needs.build_ruby_debian_11-3_4_7-normal_arm64.result != 'success'
              && (needs.build_ruby_debian_11-3_4_7-normal_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.4.7/normal];')))
            || (needs.build_ruby_debian_11-3_4_7-jemalloc_amd64.result != 'success'
              && (needs.build_ruby_debian_11-3_4_7-jemalloc_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.4.7/jemalloc];')))
            || (needs.build_ruby_debian_11-3_4_7-jemalloc_arm64.result != 'success'
              && (needs.build_ruby_debian_11-3_4_7-jemalloc_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.4.7/jemalloc];')))
            || (needs.build_ruby_debian_11-3_4_7-malloctrim_amd64.result != 'success'
              && (needs.build_ruby_debian_11-3_4_7-malloctrim_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.4.7/malloctrim];')))
            || (needs.build_ruby_debian_11-3_4_7-malloctrim_arm64.result != 'success'
              && (needs.build_ruby_debian_11-3_4_7-malloctrim_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.4.7/malloctrim];')))
            || (needs.build_ruby_debian_11-3_3_9-normal_amd64.result != 'success'
              && (needs.build_ruby_debian_11-3_3_9-normal_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.3.9/normal];')))
            || (needs.build_ruby_debian_11-3_3_9-normal_arm64.result != 'success'
              && (needs.build_ruby_debian_11-3_3_9-normal_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.3.9/normal];')))
            || (needs.build_ruby_debian_11-3_3_9-jemalloc_amd64.result != 'success'
              && (needs.build_ruby_debian_11-3_3_9-jemalloc_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.3.9/jemalloc];')))
            || (needs.build_ruby_debian_11-3_3_9-jemalloc_arm64.result != 'success'
              && (needs.build_ruby_debian_11-3_3_9-jemalloc_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.3.9/jemalloc];')))
            || (needs.build_ruby_debian_11-3_3_9-malloctrim_amd64.result != 'success'
              && (needs.build_ruby_debian_11-3_3_9-malloctrim_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.3.9/malloctrim];')))
            || (needs.build_ruby_debian_11-3_3_9-malloctrim_arm64.result != 'success'
              && (needs.build_ruby_debian_11-3_3_9-malloctrim_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.3.9/malloctrim];')))
            || (needs.build_ruby_debian_11-3_2_9-normal_amd64.result != 'success'
              && (needs.build_ruby_debian_11-3_2_9-normal_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.2.9/normal];')))
            || (needs.build_ruby_debian_11-3_2_9-normal_arm64.result != 'success'
              && (needs.build_ruby_debian_11-3_2_9-normal_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.2.9/normal];')))
            || (needs.build_ruby_debian_11-3_2_9-jemalloc_amd64.result != 'success'
              && (needs.build_ruby_debian_11-3_2_9-jemalloc_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.2.9/jemalloc];')))
            || (needs.build_ruby_debian_11-3_2_9-jemalloc_arm64.result != 'success'
              && (needs.build_ruby_debian_11-3_2_9-jemalloc_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.2.9/jemalloc];')))
            || (needs.build_ruby_debian_11-3_2_9-malloctrim_amd64.result != 'success'
              && (needs.build_ruby_debian_11-3_2_9-malloctrim_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.2.9/malloctrim];')))
            || (needs.build_ruby_debian_11-3_2_9-malloctrim_arm64.result != 'success'
              && (needs.build_ruby_debian_11-3_2_9-malloctrim_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.2.9/malloctrim];')))
            || (needs.build_ruby_debian_11-3_1_7-normal_amd64.result != 'success'
              && (needs.build_ruby_debian_11-3_1_7-normal_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.1.7/normal];')))
            || (needs.build_ruby_debian_11-3_1_7-normal_arm64.result != 'success'
              && (needs.build_ruby_debian_11-3_1_7-normal_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.1.7/normal];')))
            || (needs.build_ruby_debian_11-3_1_7-jemalloc_amd64.result != 'success'
              && (needs.build_ruby_debian_11-3_1_7-jemalloc_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.1.7/jemalloc];')))
            || (needs.build_ruby_debian_11-3_1_7-jemalloc_arm64.result != 'success'
              && (needs.build_ruby_debian_11-3_1_7-jemalloc_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.1.7/jemalloc];')))
            || (needs.build_ruby_debian_11-3_1_7-malloctrim_amd64.result != 'success'
              && (needs.build_ruby_debian_11-3_1_7-malloctrim_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.1.7/malloctrim];')))
            || (needs.build_ruby_debian_11-3_1_7-malloctrim_arm64.result != 'success'
              && (needs.build_ruby_debian_11-3_1_7-malloctrim_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [debian-11/3.1.7/malloctrim];')))
      - name: Check whether 'Ruby [ubuntu-22.04]' job did not fail
        run: 'false'
        if: |
          false
            || (needs.build_ruby_ubuntu_22_04-3_4-normal_amd64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_4-normal_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.4/normal];')))
            || (needs.build_ruby_ubuntu_22_04-3_4-normal_arm64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_4-normal_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.4/normal];')))
            || (needs.build_ruby_ubuntu_22_04-3_4-jemalloc_amd64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_4-jemalloc_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.4/jemalloc];')))
            || (needs.build_ruby_ubuntu_22_04-3_4-jemalloc_arm64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_4-jemalloc_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.4/jemalloc];')))
            || (needs.build_ruby_ubuntu_22_04-3_4-malloctrim_amd64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_4-malloctrim_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.4/malloctrim];')))
            || (needs.build_ruby_ubuntu_22_04-3_4-malloctrim_arm64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_4-malloctrim_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.4/malloctrim];')))
            || (needs.build_ruby_ubuntu_22_04-3_3-normal_amd64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_3-normal_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.3/normal];')))
            || (needs.build_ruby_ubuntu_22_04-3_3-normal_arm64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_3-normal_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.3/normal];')))
            || (needs.build_ruby_ubuntu_22_04-3_3-jemalloc_amd64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_3-jemalloc_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.3/jemalloc];')))
            || (needs.build_ruby_ubuntu_22_04-3_3-jemalloc_arm64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_3-jemalloc_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.3/jemalloc];')))
            || (needs.build_ruby_ubuntu_22_04-3_3-malloctrim_amd64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_3-malloctrim_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.3/malloctrim];')))
            || (needs.build_ruby_ubuntu_22_04-3_3-malloctrim_arm64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_3-malloctrim_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.3/malloctrim];')))
            || (needs.build_ruby_ubuntu_22_04-3_2-normal_amd64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_2-normal_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.2/normal];')))
            || (needs.build_ruby_ubuntu_22_04-3_2-normal_arm64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_2-normal_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.2/normal];')))
            || (needs.build_ruby_ubuntu_22_04-3_2-jemalloc_amd64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_2-jemalloc_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.2/jemalloc];')))
            || (needs.build_ruby_ubuntu_22_04-3_2-jemalloc_arm64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_2-jemalloc_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.2/jemalloc];')))
            || (needs.build_ruby_ubuntu_22_04-3_2-malloctrim_amd64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_2-malloctrim_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.2/malloctrim];')))
            || (needs.build_ruby_ubuntu_22_04-3_2-malloctrim_arm64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_2-malloctrim_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.2/malloctrim];')))
            || (needs.build_ruby_ubuntu_22_04-3_1-normal_amd64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_1-normal_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.1/normal];')))
            || (needs.build_ruby_ubuntu_22_04-3_1-normal_arm64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_1-normal_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.1/normal];')))
            || (needs.build_ruby_ubuntu_22_04-3_1-jemalloc_amd64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_1-jemalloc_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.1/jemalloc];')))
            || (needs.build_ruby_ubuntu_22_04-3_1-jemalloc_arm64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_1-jemalloc_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.1/jemalloc];')))
            || (needs.build_ruby_ubuntu_22_04-3_1-malloctrim_amd64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_1-malloctrim_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.1/malloctrim];')))
            || (needs.build_ruby_ubuntu_22_04-3_1-malloctrim_arm64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_1-malloctrim_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.1/malloctrim];')))
            || (needs.build_ruby_ubuntu_22_04-3_4_7-normal_amd64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_4_7-normal_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.4.7/normal];')))
            || (needs.build_ruby_ubuntu_22_04-3_4_7-normal_arm64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_4_7-normal_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.4.7/normal];')))
            || (needs.build_ruby_ubuntu_22_04-3_4_7-jemalloc_amd64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_4_7-jemalloc_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.4.7/jemalloc];')))
            || (needs.build_ruby_ubuntu_22_04-3_4_7-jemalloc_arm64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_4_7-jemalloc_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.4.7/jemalloc];')))
            || (needs.build_ruby_ubuntu_22_04-3_4_7-malloctrim_amd64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_4_7-malloctrim_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.4.7/malloctrim];')))
            || (needs.build_ruby_ubuntu_22_04-3_4_7-malloctrim_arm64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_4_7-malloctrim_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.4.7/malloctrim];')))
            || (needs.build_ruby_ubuntu_22_04-3_3_9-normal_amd64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_3_9-normal_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.3.9/normal];')))
            || (needs.build_ruby_ubuntu_22_04-3_3_9-normal_arm64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_3_9-normal_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.3.9/normal];')))
            || (needs.build_ruby_ubuntu_22_04-3_3_9-jemalloc_amd64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_3_9-jemalloc_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.3.9/jemalloc];')))
            || (needs.build_ruby_ubuntu_22_04-3_3_9-jemalloc_arm64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_3_9-jemalloc_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.3.9/jemalloc];')))
            || (needs.build_ruby_ubuntu_22_04-3_3_9-malloctrim_amd64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_3_9-malloctrim_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.3.9/malloctrim];')))
            || (needs.build_ruby_ubuntu_22_04-3_3_9-malloctrim_arm64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_3_9-malloctrim_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.3.9/malloctrim];')))
            || (needs.build_ruby_ubuntu_22_04-3_2_9-normal_amd64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_2_9-normal_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.2.9/normal];')))
            || (needs.build_ruby_ubuntu_22_04-3_2_9-normal_arm64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_2_9-normal_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.2.9/normal];')))
            || (needs.build_ruby_ubuntu_22_04-3_2_9-jemalloc_amd64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_2_9-jemalloc_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.2.9/jemalloc];')))
            || (needs.build_ruby_ubuntu_22_04-3_2_9-jemalloc_arm64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_2_9-jemalloc_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.2.9/jemalloc];')))
            || (needs.build_ruby_ubuntu_22_04-3_2_9-malloctrim_amd64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_2_9-malloctrim_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.2.9/malloctrim];')))
            || (needs.build_ruby_ubuntu_22_04-3_2_9-malloctrim_arm64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_2_9-malloctrim_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.2.9/malloctrim];')))
            || (needs.build_ruby_ubuntu_22_04-3_1_7-normal_amd64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_1_7-normal_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.1.7/normal];')))
            || (needs.build_ruby_ubuntu_22_04-3_1_7-normal_arm64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_1_7-normal_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.1.7/normal];')))
            || (needs.build_ruby_ubuntu_22_04-3_1_7-jemalloc_amd64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_1_7-jemalloc_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.1.7/jemalloc];')))
            || (needs.build_ruby_ubuntu_22_04-3_1_7-jemalloc_arm64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_1_7-jemalloc_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.1.7/jemalloc];')))
            || (needs.build_ruby_ubuntu_22_04-3_1_7-malloctrim_amd64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_1_7-malloctrim_amd64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.1.7/malloctrim];')))
            || (needs.build_ruby_ubuntu_22_04-3_1_7-malloctrim_arm64.result != 'success'
              && (needs.build_ruby_ubuntu_22_04-3_1_7-malloctrim_arm64.result != 'skipped'
                || contains(inputs.necessary_jobs, ';Build Ruby [ubuntu-22.04/3.1.7/malloctrim];')))
