# WARNING: DO NOT EDIT THIS FILE!!!
#
# This file is autogenerated from .github/workflows/ci-cd-build-packages.yml.erb
# by ./internal-scripts/generate-ci-cd-yaml.rb.
# Please edit the .erb file instead, then regenerate YAML
# by running that script.
#
# TIP: run this on your development machine to ensure generate-ci-cd-yaml.rb
# is run automatically as a Git pre-commit hook:
#
#   git config core.hooksPath .githooks

name: 'CI/CD: build packages'

on:
  workflow_dispatch:
    inputs:
      ci_artifacts_run_number:
        required: false
      check_id:
        required: false

env:
  CI_ARTIFACTS_BUCKET: fullstaq-ruby-server-edition-ci-artifacts
  CI_ARTIFACTS_RUN_NUMBER: ${{ github.event.inputs.ci_artifacts_run_number || github.run_number }}

jobs:
  # Determines which jobs should be run, or (in case this is a re-run)
  # which jobs can be skipped this time because the last run succeeded.
  # We determine this by checking whether the artifacts produced by jobs
  # exist in this run.
  determine_necessary_jobs:
    name: Determine necessary jobs
    runs-on: ubuntu-20.04
    permissions:
      checks: write
    outputs:
      necessary_jobs: ${{ steps.check.outputs.necessary_jobs }}
    steps:
      - name: Dump inputs
        run: echo "$INPUTS"
        env:
          INPUTS: ${{ toJSON(github.event.inputs) }}

      - name: Mark check as 'in progress'
        uses: LouisBrunner/checks-action@3d24d4813a797720cc4e2080a50bdafb3373aef1
        if: github.event.inputs.check_id
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          check_id: ${{ github.event.inputs.check_id }}
          status: in_progress
          details_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          output: |
            {
              "summary": "Packages are built in another workflow.\n[**âžœ See workflow run #${{ github.run_id }} for logs**](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
            }

      - uses: actions/checkout@v2
      - name: Login to Google Cloud
        uses: ./.github/actions/gcloud-login
        with:
          private_key: ${{ secrets.GCLOUD_KEY }}

      - name: List artifacts built in previous try of same CI run
        run: ./internal-scripts/ci-cd/determine-necessary-jobs/list-artifacts.sh

      - name: Determine necessary jobs
        id: check
        run: ./internal-scripts/ci-cd/determine-necessary-jobs/determine-necessary-jobs.rb


  ### Jemalloc ###


  build_jemalloc_centos_8:
    name: 'Build Jemalloc [centos-8]'
    runs-on: ubuntu-20.04
    needs:
      - determine_necessary_jobs
    if: contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Build Jemalloc [centos-8];')
    steps:
      - uses: actions/checkout@v2
      - name: Login to Google Cloud
        uses: ./.github/actions/gcloud-login
        with:
          private_key: ${{ secrets.GCLOUD_KEY }}
      - name: Fetch cache
        uses: actions/cache@v1
        with:
          path: cache
          key: 'jemalloc-bin-centos-8-3.6.0'
      - name: Create cache dir
        run: mkdir -p cache

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Docker image absent in registry centos-8;')
        env:
          ARTIFACT_NAME: 'docker-image-centos-8'
          ARTIFACT_PATH: .
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Docker image absent in registry centos-8;')
        env:
          TARBALL: image.tar.zst

      - name: Download source
        run: ./internal-scripts/ci-cd/build-jemalloc-binaries/download-source.sh
        env:
          JEMALLOC_VERSION: "3.6.0"

      - name: Build
        run: ./internal-scripts/ci-cd/build-jemalloc-binaries/build.sh
        env:
          ENVIRONMENT_NAME: 'centos-8'

      - name: Archive artifact
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: 'jemalloc-bin-centos-8'
          ARTIFACT_PATH: output
  build_jemalloc_ubuntu_20_04:
    name: 'Build Jemalloc [ubuntu-20.04]'
    runs-on: ubuntu-20.04
    needs:
      - determine_necessary_jobs
    if: contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Build Jemalloc [ubuntu-20.04];')
    steps:
      - uses: actions/checkout@v2
      - name: Login to Google Cloud
        uses: ./.github/actions/gcloud-login
        with:
          private_key: ${{ secrets.GCLOUD_KEY }}
      - name: Fetch cache
        uses: actions/cache@v1
        with:
          path: cache
          key: 'jemalloc-bin-ubuntu-20.04-3.6.0'
      - name: Create cache dir
        run: mkdir -p cache

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Docker image absent in registry ubuntu-20.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-20.04'
          ARTIFACT_PATH: .
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Docker image absent in registry ubuntu-20.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download source
        run: ./internal-scripts/ci-cd/build-jemalloc-binaries/download-source.sh
        env:
          JEMALLOC_VERSION: "3.6.0"

      - name: Build
        run: ./internal-scripts/ci-cd/build-jemalloc-binaries/build.sh
        env:
          ENVIRONMENT_NAME: 'ubuntu-20.04'

      - name: Archive artifact
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: 'jemalloc-bin-ubuntu-20.04'
          ARTIFACT_PATH: output


  ### fullstaq-ruby-common ###

  build_common_deb:
    name: Build common DEB
    runs-on: ubuntu-20.04
    needs:
      - determine_necessary_jobs
    if: contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Build common DEB;')
    steps:
      - uses: actions/checkout@v2
      - name: Login to Google Cloud
        uses: ./.github/actions/gcloud-login
        with:
          private_key: ${{ secrets.GCLOUD_KEY }}

      - name: Download utility Docker image
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Docker image absent in registry utility;')
        env:
          ARTIFACT_NAME: docker-image-utility
          ARTIFACT_PATH: .
      - name: Load utility Docker image
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Docker image absent in registry utility;')
        env:
          TARBALL: image.tar.zst

      - name: Build package
        run: ./internal-scripts/ci-cd/build-common-deb/build-package.sh
        env:
          PACKAGE_BASENAME: "fullstaq-ruby-common_1.0-0_all.deb"
          VERSION: "1.0"
          REVISION: "0"

      - name: Archive artifact
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: common-deb
          ARTIFACT_PATH: output


  build_common_rpm:
    name: Build common RPM
    runs-on: ubuntu-20.04
    needs:
      - determine_necessary_jobs
    if: contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Build common RPM;')
    steps:
      - uses: actions/checkout@v2
      - name: Login to Google Cloud
        uses: ./.github/actions/gcloud-login
        with:
          private_key: ${{ secrets.GCLOUD_KEY }}

      - name: Download utility Docker image
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Docker image absent in registry utility;')
        env:
          ARTIFACT_NAME: docker-image-utility
          ARTIFACT_PATH: .
      - name: Load utility Docker image
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Docker image absent in registry utility;')
        env:
          TARBALL: image.tar.zst

      - name: Build package
        run: ./internal-scripts/ci-cd/build-common-rpm/build-package.sh
        env:
          PACKAGE_BASENAME: "fullstaq-ruby-common-1.0-0.noarch.rpm"
          VERSION: "1.0"
          REVISION: "0"

      - name: Archive artifact
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: common-rpm
          ARTIFACT_PATH: output


  ### Rbenv ###

  build_rbenv_deb:
    name: Build Rbenv DEB
    runs-on: ubuntu-20.04
    needs:
      - determine_necessary_jobs
    # Run even if a dependent job has been skipped
    if: contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Build Rbenv DEB;')
    steps:
      - uses: actions/checkout@v2
      - name: Login to Google Cloud
        uses: ./.github/actions/gcloud-login
        with:
          private_key: ${{ secrets.GCLOUD_KEY }}

      - name: Fetch Rbenv source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: rbenv-src
          ARTIFACT_PATH: .

      - name: Download utility Docker image
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Docker image absent in registry utility;')
        env:
          ARTIFACT_NAME: docker-image-utility
          ARTIFACT_PATH: .
      - name: Load utility Docker image
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Docker image absent in registry utility;')
        env:
          TARBALL: image.tar.zst

      - name: Build package
        run: ./internal-scripts/ci-cd/build-rbenv-deb/build-package.sh
        env:
          PACKAGE_BASENAME: "fullstaq-rbenv_1.1.2-16-1_all.deb"
          VERSION: "1.1.2-16"
          REVISION: "1"

      - name: Archive artifact
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: rbenv-deb
          ARTIFACT_PATH: output


  build_rbenv_rpm:
    name: Build Rbenv RPM
    runs-on: ubuntu-20.04
    needs:
      - determine_necessary_jobs
    # Run even if a dependent job has been skipped
    if: contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Build Rbenv RPM;')
    steps:
      - uses: actions/checkout@v2
      - name: Login to Google Cloud
        uses: ./.github/actions/gcloud-login
        with:
          private_key: ${{ secrets.GCLOUD_KEY }}

      - name: Fetch Rbenv source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: rbenv-src
          ARTIFACT_PATH: .

      - name: Download utility Docker image
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Docker image absent in registry utility;')
        env:
          ARTIFACT_NAME: docker-image-utility
          ARTIFACT_PATH: .
      - name: Load utility Docker image
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Docker image absent in registry utility;')
        env:
          TARBALL: image.tar.zst

      - name: Build package
        run: ./internal-scripts/ci-cd/build-rbenv-rpm/build-package.sh
        env:
          PACKAGE_BASENAME: "fullstaq-rbenv-1.1.2_16-1.noarch.rpm"
          VERSION: "1.1.2-16"
          REVISION: "1"

      - name: Archive artifact
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: rbenv-rpm
          ARTIFACT_PATH: output


  ### Ruby ###



  build_ruby_centos_8-3_0-normal:
    name: 'Build Ruby [centos-8/3.0/normal]'
    runs-on: ubuntu-20.04
    needs:
      - determine_necessary_jobs
      - build_jemalloc_centos_8
    # Run even if a dependent job has been skipped
    if: |
      contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Build Ruby [centos-8/3.0/normal];')
      && !failure() && !cancelled()
    steps:
      - name: Check whether 'Build Jemalloc [centos-8]' did not fail
        run: 'false'
        if: |
          needs.build_jemalloc_centos_8.result == 'skipped'
          && contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Build Jemalloc [centos-8];')

      - uses: actions/checkout@v2
      - name: Login to Google Cloud
        uses: ./.github/actions/gcloud-login
        with:
          private_key: ${{ secrets.GCLOUD_KEY }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.0.2
          ARTIFACT_PATH: .

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Docker image absent in registry centos-8;')
        env:
          ARTIFACT_NAME: 'docker-image-centos-8'
          ARTIFACT_PATH: .
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Docker image absent in registry centos-8;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Docker image absent in registry utility;')
        env:
          ARTIFACT_NAME: docker-image-utility
          ARTIFACT_PATH: .
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Docker image absent in registry utility;')
        env:
          TARBALL: image.tar.zst

      

      - name: Reset & prepare workspace
        run: mkdir cache-normal
      - name: "[normal] Fetch cache"
        uses: actions/cache@v2
        with:
          path: cache-normal
          key: v2-ruby-bin-3.0-centos-8-normal

      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "centos-8"
          VARIANT_NAME: "normal"
          RUBY_PACKAGE_VERSION_ID: "3.0"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "centos-8"
          VARIANT_NAME: "normal"
          VARIANT_PACKAGE_SUFFIX: ""
          PACKAGE_FORMAT: "RPM"
          RUBY_PACKAGE_VERSION_ID: "3.0"
          RUBY_PACKAGE_REVISION: "4"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.0_centos-8_normal"
          ARTIFACT_PATH: output-normal

  build_ruby_centos_8-3_0_2-normal:
    name: 'Build Ruby [centos-8/3.0.2/normal]'
    runs-on: ubuntu-20.04
    needs:
      - determine_necessary_jobs
      - build_jemalloc_centos_8
    # Run even if a dependent job has been skipped
    if: |
      contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Build Ruby [centos-8/3.0.2/normal];')
      && !failure() && !cancelled()
    steps:
      - name: Check whether 'Build Jemalloc [centos-8]' did not fail
        run: 'false'
        if: |
          needs.build_jemalloc_centos_8.result == 'skipped'
          && contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Build Jemalloc [centos-8];')

      - uses: actions/checkout@v2
      - name: Login to Google Cloud
        uses: ./.github/actions/gcloud-login
        with:
          private_key: ${{ secrets.GCLOUD_KEY }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.0.2
          ARTIFACT_PATH: .

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Docker image absent in registry centos-8;')
        env:
          ARTIFACT_NAME: 'docker-image-centos-8'
          ARTIFACT_PATH: .
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Docker image absent in registry centos-8;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Docker image absent in registry utility;')
        env:
          ARTIFACT_NAME: docker-image-utility
          ARTIFACT_PATH: .
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Docker image absent in registry utility;')
        env:
          TARBALL: image.tar.zst

      

      - name: Reset & prepare workspace
        run: mkdir cache-normal
      - name: "[normal] Fetch cache"
        uses: actions/cache@v2
        with:
          path: cache-normal
          key: v2-ruby-bin-3.0.2-centos-8-normal

      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "centos-8"
          VARIANT_NAME: "normal"
          RUBY_PACKAGE_VERSION_ID: "3.0.2"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "centos-8"
          VARIANT_NAME: "normal"
          VARIANT_PACKAGE_SUFFIX: ""
          PACKAGE_FORMAT: "RPM"
          RUBY_PACKAGE_VERSION_ID: "3.0.2"
          RUBY_PACKAGE_REVISION: "4"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.0.2_centos-8_normal"
          ARTIFACT_PATH: output-normal


  build_ruby_ubuntu_20_04-3_0-normal:
    name: 'Build Ruby [ubuntu-20.04/3.0/normal]'
    runs-on: ubuntu-20.04
    needs:
      - determine_necessary_jobs
      - build_jemalloc_ubuntu_20_04
    # Run even if a dependent job has been skipped
    if: |
      contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Build Ruby [ubuntu-20.04/3.0/normal];')
      && !failure() && !cancelled()
    steps:
      - name: Check whether 'Build Jemalloc [ubuntu-20.04]' did not fail
        run: 'false'
        if: |
          needs.build_jemalloc_ubuntu_20_04.result == 'skipped'
          && contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Build Jemalloc [ubuntu-20.04];')

      - uses: actions/checkout@v2
      - name: Login to Google Cloud
        uses: ./.github/actions/gcloud-login
        with:
          private_key: ${{ secrets.GCLOUD_KEY }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.0.2
          ARTIFACT_PATH: .

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Docker image absent in registry ubuntu-20.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-20.04'
          ARTIFACT_PATH: .
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Docker image absent in registry ubuntu-20.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Docker image absent in registry utility;')
        env:
          ARTIFACT_NAME: docker-image-utility
          ARTIFACT_PATH: .
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Docker image absent in registry utility;')
        env:
          TARBALL: image.tar.zst

      

      - name: Reset & prepare workspace
        run: mkdir cache-normal
      - name: "[normal] Fetch cache"
        uses: actions/cache@v2
        with:
          path: cache-normal
          key: v2-ruby-bin-3.0-ubuntu-20.04-normal

      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-20.04"
          VARIANT_NAME: "normal"
          RUBY_PACKAGE_VERSION_ID: "3.0"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-20.04"
          VARIANT_NAME: "normal"
          VARIANT_PACKAGE_SUFFIX: ""
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.0"
          RUBY_PACKAGE_REVISION: "4"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.0_ubuntu-20.04_normal"
          ARTIFACT_PATH: output-normal

  build_ruby_ubuntu_20_04-3_0_2-normal:
    name: 'Build Ruby [ubuntu-20.04/3.0.2/normal]'
    runs-on: ubuntu-20.04
    needs:
      - determine_necessary_jobs
      - build_jemalloc_ubuntu_20_04
    # Run even if a dependent job has been skipped
    if: |
      contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Build Ruby [ubuntu-20.04/3.0.2/normal];')
      && !failure() && !cancelled()
    steps:
      - name: Check whether 'Build Jemalloc [ubuntu-20.04]' did not fail
        run: 'false'
        if: |
          needs.build_jemalloc_ubuntu_20_04.result == 'skipped'
          && contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Build Jemalloc [ubuntu-20.04];')

      - uses: actions/checkout@v2
      - name: Login to Google Cloud
        uses: ./.github/actions/gcloud-login
        with:
          private_key: ${{ secrets.GCLOUD_KEY }}
      - name: Fetch Ruby source
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: ruby-src-3.0.2
          ARTIFACT_PATH: .

      - name: Download Docker image necessary for building
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Docker image absent in registry ubuntu-20.04;')
        env:
          ARTIFACT_NAME: 'docker-image-ubuntu-20.04'
          ARTIFACT_PATH: .
      - name: Load Docker image necessary for building
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Docker image absent in registry ubuntu-20.04;')
        env:
          TARBALL: image.tar.zst

      - name: Download Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Docker image absent in registry utility;')
        env:
          ARTIFACT_NAME: docker-image-utility
          ARTIFACT_PATH: .
      - name: Load Docker image necessary for packaging
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Docker image absent in registry utility;')
        env:
          TARBALL: image.tar.zst

      

      - name: Reset & prepare workspace
        run: mkdir cache-normal
      - name: "[normal] Fetch cache"
        uses: actions/cache@v2
        with:
          path: cache-normal
          key: v2-ruby-bin-3.0.2-ubuntu-20.04-normal

      - name: Build binaries
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
        env:
          ENVIRONMENT_NAME: "ubuntu-20.04"
          VARIANT_NAME: "normal"
          RUBY_PACKAGE_VERSION_ID: "3.0.2"

      - name: Build package
        run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
        env:
          DISTRIBUTION_NAME: "ubuntu-20.04"
          VARIANT_NAME: "normal"
          VARIANT_PACKAGE_SUFFIX: ""
          PACKAGE_FORMAT: "DEB"
          RUBY_PACKAGE_VERSION_ID: "3.0.2"
          RUBY_PACKAGE_REVISION: "4"

      - name: Archive package artifact to Google Cloud
        run: ./internal-scripts/ci-cd/upload-artifact.sh
        env:
          ARTIFACT_NAME: "ruby-pkg_3.0.2_ubuntu-20.04_normal"
          ARTIFACT_PATH: output-normal



  ### Finalize ###

  finalize:
    name: Finalize
    permissions:
      checks: write
    needs:
      - determine_necessary_jobs
      - build_common_deb
      - build_common_rpm
      - build_rbenv_deb
      - build_rbenv_rpm

      - build_jemalloc_centos_8

      - build_ruby_centos_8-3_0-normal

      - build_ruby_centos_8-3_0_2-normal

      - build_jemalloc_ubuntu_20_04

      - build_ruby_ubuntu_20_04-3_0-normal

      - build_ruby_ubuntu_20_04-3_0_2-normal
    runs-on: ubuntu-20.04
    if: 'always()'
    steps:
      - uses: actions/checkout@v2
      - name: Login to Google Cloud
        uses: ./.github/actions/gcloud-login
        with:
          private_key: ${{ secrets.GCLOUD_KEY }}


      ### Publish all artifacts in Google Cloud as Github Actions artifacts ###
      # We publish these artifacts in a dedicated job instead
      # of in each job individually, because the individual jobs
      # could be skipped during a re-run.

      - name: Download common DEB artifact from Google Cloud
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: common-deb
          ARTIFACT_PATH: artifacts
          CLEAR: true
      - name: Archive common DEB artifact to Github
        uses: actions/upload-artifact@v2
        with:
          name: common-deb
          path: artifacts

      - name: Download common RPM artifact from Google Cloud
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: common-rpm
          ARTIFACT_PATH: artifacts
          CLEAR: true
      - name: Archive common RPM artifact to Github
        uses: actions/upload-artifact@v2
        with:
          name: common-rpm
          path: artifacts

      - name: Download Rbenv DEB artifact from Google Cloud
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: rbenv-deb
          ARTIFACT_PATH: artifacts
          CLEAR: true
      - name: Archive Rbenv DEB artifact to Github
        uses: actions/upload-artifact@v2
        with:
          name: rbenv-deb
          path: artifacts

      - name: Download Rbenv RPM artifact from Google Cloud
        run: ./internal-scripts/ci-cd/download-artifact.sh
        env:
          ARTIFACT_NAME: rbenv-rpm
          ARTIFACT_PATH: artifacts
          CLEAR: true
      - name: Archive Rbenv RPM artifact to Github
        uses: actions/upload-artifact@v2
        with:
          name: rbenv-rpm
          path: artifacts

      - name: Download Jemalloc binary artifacts from Google Cloud
        run: ./internal-scripts/ci-cd/download-artifacts.sh
        env:
          ARTIFACT_NAMES: |
            jemalloc-bin-centos-8
            jemalloc-bin-ubuntu-20.04
          ARTIFACT_PATH: artifacts
          CLEAR: true
      - name: Archive Jemalloc binary artifact [centos-8] to Github
        uses: actions/upload-artifact@v2
        with:
          name: 'jemalloc-bin-centos-8'
          path: 'artifacts/jemalloc-bin-centos-8'
      - name: Archive Jemalloc binary artifact [ubuntu-20.04] to Github
        uses: actions/upload-artifact@v2
        with:
          name: 'jemalloc-bin-ubuntu-20.04'
          path: 'artifacts/jemalloc-bin-ubuntu-20.04'

      - name: Download Ruby package artifacts from Google Cloud
        run: ./internal-scripts/ci-cd/download-artifacts.sh
        env:
          ARTIFACT_NAMES: 'ruby-pkg_3.0_centos-8_normal ruby-pkg_3.0_ubuntu-20.04_normal ruby-pkg_3.0.2_centos-8_normal ruby-pkg_3.0.2_ubuntu-20.04_normal'
          ARTIFACT_PATH: artifacts
          CLEAR: true
      - name: Archive Ruby package artifact [ruby-pkg_3.0_centos-8_normal] to Github
        uses: actions/upload-artifact@v2
        with:
          name: ruby-pkg_3.0_centos-8_normal
          path: artifacts/ruby-pkg_3.0_centos-8_normal
      - name: Archive Ruby package artifact [ruby-pkg_3.0_ubuntu-20.04_normal] to Github
        uses: actions/upload-artifact@v2
        with:
          name: ruby-pkg_3.0_ubuntu-20.04_normal
          path: artifacts/ruby-pkg_3.0_ubuntu-20.04_normal
      - name: Archive Ruby package artifact [ruby-pkg_3.0.2_centos-8_normal] to Github
        uses: actions/upload-artifact@v2
        with:
          name: ruby-pkg_3.0.2_centos-8_normal
          path: artifacts/ruby-pkg_3.0.2_centos-8_normal
      - name: Archive Ruby package artifact [ruby-pkg_3.0.2_ubuntu-20.04_normal] to Github
        uses: actions/upload-artifact@v2
        with:
          name: ruby-pkg_3.0.2_ubuntu-20.04_normal
          path: artifacts/ruby-pkg_3.0.2_ubuntu-20.04_normal


      ### Check whether dependent jobs failed ###
      # Only trigger next workflow if there are no failures.

      - name: Check whether 'Determine necessary jobs' succeeded
        run: 'false'
        if: needs.determine_necessary_jobs.result != 'success'
      - name: Check whether 'Build common DEB' did not fail
        run: 'false'
        if: |
          needs.build_common_deb.result != 'success'
          && (needs.build_common_deb.result != 'skipped'
            || contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Build common DEB;'))
      - name: Check whether 'Build common RPM' did not fail
        run: 'false'
        if: |
          needs.build_common_rpm.result != 'success'
          && (needs.build_common_rpm.result != 'skipped'
            || contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Build common RPM;'))
      - name: Check whether 'Build Rbenv DEB' did not fail
        run: 'false'
        if: |
          needs.build_rbenv_deb.result != 'success'
          && (needs.build_rbenv_deb.result != 'skipped'
            || contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Build Rbenv DEB;'))
      - name: Check whether 'Build Rbenv RPM' did not fail
        run: 'false'
        if: |
          needs.build_rbenv_rpm.result != 'success'
          && (needs.build_rbenv_rpm.result != 'skipped'
            || contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Build Rbenv RPM;'))
      - name: Check whether 'Build Jemalloc' did not fail
        run: 'false'
        if: |
          false
            || (needs.build_jemalloc_centos_8.result != 'success'
              && (needs.build_jemalloc_centos_8.result != 'skipped'
                || contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Build Jemalloc [centos-8];')))
            || (needs.build_jemalloc_ubuntu_20_04.result != 'success'
              && (needs.build_jemalloc_ubuntu_20_04.result != 'skipped'
                || contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Build Jemalloc [ubuntu-20.04];')))
      - name: Check whether 'Build Ruby [centos-8]' did not fail
        run: 'false'
        if: |
          false
            || (needs.build_ruby_centos_8-3_0-normal.result != 'success'
              && (needs.build_ruby_centos_8-3_0-normal.result != 'skipped'
                || contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Build Ruby [centos-8/3.0/normal];')))
            || (needs.build_ruby_centos_8-3_0_2-normal.result != 'success'
              && (needs.build_ruby_centos_8-3_0_2-normal.result != 'skipped'
                || contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Build Ruby [centos-8/3.0.2/normal];')))
      - name: Check whether 'Build Ruby [ubuntu-20.04]' did not fail
        run: 'false'
        if: |
          false
            || (needs.build_ruby_ubuntu_20_04-3_0-normal.result != 'success'
              && (needs.build_ruby_ubuntu_20_04-3_0-normal.result != 'skipped'
                || contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Build Ruby [ubuntu-20.04/3.0/normal];')))
            || (needs.build_ruby_ubuntu_20_04-3_0_2-normal.result != 'success'
              && (needs.build_ruby_ubuntu_20_04-3_0_2-normal.result != 'skipped'
                || contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Build Ruby [ubuntu-20.04/3.0.2/normal];')))


      ### Trigger next workflow ###

      - name: Create check for 'Publish & test against test repos'
        uses: LouisBrunner/checks-action@3d24d4813a797720cc4e2080a50bdafb3373aef1
        id: create_check
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Publish & test against test repos
          status: queued

      - name: Trigger workflow for 'Publish & test against test repos'
        uses: benc-uk/workflow-dispatch@4c044c1613fabbe5250deadc65452d54c4ad4fc7
        with:
          workflow: 'CI/CD: publish & test against test repos'
          token: ${{ secrets.WORKFLOW_DISPATCH_TOKEN }}
          inputs: |
            {
              "ci_artifacts_run_number": "${{ env.CI_ARTIFACTS_RUN_NUMBER }}",
              "check_id": "${{ steps.create_check.outputs.check_id }}"
            }


      ### Update own check status ###

      - name: Mark check as 'success'
        uses: LouisBrunner/checks-action@3d24d4813a797720cc4e2080a50bdafb3373aef1
        if: 'github.event.inputs.check_id && success()'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          check_id: ${{ github.event.inputs.check_id }}
          conclusion: success

      - name: Mark check as 'failure'
        uses: LouisBrunner/checks-action@3d24d4813a797720cc4e2080a50bdafb3373aef1
        if: 'github.event.inputs.check_id && failure()'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          check_id: ${{ github.event.inputs.check_id }}
          conclusion: failure

      - name: Mark check as 'cancelled'
        uses: LouisBrunner/checks-action@3d24d4813a797720cc4e2080a50bdafb3373aef1
        if: 'github.event.inputs.check_id && cancelled()'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          check_id: ${{ github.event.inputs.check_id }}
          conclusion: cancelled
