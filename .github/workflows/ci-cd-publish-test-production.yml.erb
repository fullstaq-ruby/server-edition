<%= editing_warning_comment('ci-cd-publish-test-production') %>

name: 'CI/CD: publish & test against production repos'

on:
  workflow_dispatch:
    inputs:
      ci_artifacts_run_number:
        required: false
      check_id:
        required: false

env:
  GCLOUD_PROJECT: fullstaq-ruby
  CI_ARTIFACTS_BUCKET: fullstaq-ruby-server-edition-ci-artifacts
  CI_ARTIFACTS_RUN_NUMBER: ${{ github.event.inputs.ci_artifacts_run_number || github.run_number }}

jobs:
  # Determines which jobs should be run, or (in case this is a re-run)
  # which jobs can be skipped this time because the last run succeeded.
  # We determine this by checking whether the artifacts produced by jobs
  # exist in this run.
  determine_necessary_jobs:
    name: Determine necessary jobs
    runs-on: ubuntu-22.04
    permissions:
      checks: write
      packages: read
    outputs:
      necessary_jobs: ${{ steps.check.outputs.necessary_jobs }}
    steps:
      - name: Dump inputs
        run: echo "$INPUTS"
        env:
          INPUTS: ${{ toJSON(github.event.inputs) }}

      - name: Mark check as 'in progress'
        uses: LouisBrunner/checks-action@3d24d4813a797720cc4e2080a50bdafb3373aef1
        if: github.event.inputs.check_id
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          check_id: ${{ github.event.inputs.check_id }}
          status: in_progress
          details_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          output: |
            {
              "summary": "Packages are tested in another workflow.\n[**âžœ See workflow run #${{ github.run_id }} for logs**](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
            }

      - uses: actions/checkout@v3
      - name: Login to Google Cloud
        uses: ./.github/actions/gcloud-login
        with:
          private_key: ${{ secrets.GCLOUD_KEY }}

      - name: List artifacts built in previous try of same CI run
        run: ./internal-scripts/ci-cd/determine-necessary-jobs/list-artifacts.sh

      - name: Determine necessary jobs
        id: check
        run: ./internal-scripts/ci-cd/determine-necessary-jobs/determine-necessary-jobs.rb
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  ### Publish ###

  publish:
    name: Publish packages
    # Ubuntu 24.04 runner has more free disk space than 22.04
    runs-on: ubuntu-24.04
    environment: Production repos
    timeout-minutes: 30
    permissions:
      packages: read
    needs:
      - determine_necessary_jobs
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Clean disk space
        run: ./internal-scripts/ci-cd/publish/clean-disk-space.sh
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          version: '>= 363.0.0'
      - name: Login to Google Cloud
        uses: ./.github/actions/gcloud-login
        with:
          private_key: ${{ secrets.GCLOUD_KEY }}
      - name: Set Google Cloud project
        run: gcloud config set core/project ${{ env.GCLOUD_PROJECT }}
      - name: Login to Github Container Registry
        run: docker login ghcr.io -u ${{ github.actor }} --password-stdin <<<"$GITHUB_TOKEN"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download artifacts
        run: ./internal-scripts/ci-cd/download-artifacts.sh
        env:
          ARTIFACT_NAMES: |
            <%= common_deb_artifact_name %>
            <%= common_rpm_artifact_name %>
            <%= rbenv_deb_artifact_name %>
            <%= rbenv_rpm_artifact_name %>
            <%= ruby_package_artifact_names.join(' ') %>
          ARTIFACT_PATH: pkgs

      - name: Download Docker image necessary for publishing
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: <%= docker_image_artifact_name('utility') %>
          ARTIFACT_PATH: .
      - name: Load Docker image necessary for publishing
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst
      - name: Install Aptly
        run: ./internal-scripts/ci-cd/publish/install-aptly.sh

      - name: Determine latest release tag
        # Sets environment variable $LATEST_RELEASE_TAG
        run: ./internal-scripts/ci-cd/check-version-numbers-need-changing/determine-latest-release-tag.sh

      - name: Upload DEBs to repo
        run: ./internal-scripts/ci-cd/publish/publish-debs.rb pkgs/*/*.deb
        env:
          PRODUCTION_REPO_BUCKET_NAME: fullstaq-ruby-server-edition-apt-repo
          CI_ARTIFACTS_BUCKET_NAME: ${{ env.CI_ARTIFACTS_BUCKET }}
          TESTING: false
          OVERWRITE_EXISTING: false
          DRY_RUN: ${{ github.ref != 'refs/heads/main' }}
          CLEANUP: true

      - name: Upload RPMs to repo
        run: ./internal-scripts/ci-cd/publish/publish-rpms.rb pkgs/*/*.rpm
        env:
          PRODUCTION_REPO_BUCKET_NAME: fullstaq-ruby-server-edition-yum-repo
          CI_ARTIFACTS_BUCKET_NAME: ${{ env.CI_ARTIFACTS_BUCKET }}
          TESTING: false
          OVERWRITE_EXISTING: false
          DRY_RUN: ${{ github.ref != 'refs/heads/main' }}


  ### Run tests ###

  <%- distributions.each do |distribution| %>
  <%- ruby_package_versions_for_distro(distribution).each do |ruby_package_version| -%>
  <%- variants.each do |variant| -%>
  <%- unindent(2) do %>
    test_<%= slug(distribution[:name]) %>-<%= slug(ruby_package_version[:id]) %>-<%= slug(variant[:name]) %>:
      name: 'Test [<%= distribution[:name] %>/<%= ruby_package_version[:id] %>/<%= variant[:name] %>]'
      runs-on: ubuntu-22.04
      timeout-minutes: 30
      needs:
        - determine_necessary_jobs
        - publish
      if: |
        github.ref == 'refs/heads/main'
        && contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Test against production repo [<%= distribution[:name] %>/<%= ruby_package_version[:id] %>/<%= variant[:name] %>];')
      steps:
        - uses: actions/checkout@v3
        - name: Login to Google Cloud
          uses: ./.github/actions/gcloud-login
          with:
            private_key: ${{ secrets.GCLOUD_KEY }}

        - name: Run tests
          run: ./internal-scripts/ci-cd/test-packages/run-tests.sh
          env:
            DISTRIBUTION_NAME: "<%= distribution[:name] %>"
            RUBY_PACKAGE_ID: "<%= ruby_package_version[:id] %>"
            PACKAGE_FORMAT: "<%= distribution[:package_format] %>"
            VARIANT_NAME: "<%= variant[:name] %>"
            VARIANT_PACKAGE_SUFFIX: "<%= variant[:package_suffix] %>"
            TEST_IMAGE_NAME: "<%= distribution[:test_image] %>"
            APT_REPO_URL: https://apt.fullstaqruby.org
            YUM_REPO_URL: https://yum.fullstaqruby.org

        - name: Create mark file
          run: mkdir mark-<%= variant[:name] %> && touch mark-<%= variant[:name] %>/done.txt
        - name: Mark job as done
          run: ./internal-scripts/ci-cd/upload-artifact.sh
          env:
            ARTIFACT_NAME: tested-against-production-<%= distribution[:name] %>_<%= ruby_package_version[:id] %>_<%= variant[:name] %>
            ARTIFACT_PATH: mark-<%= variant[:name] %>
  <%- end -%>
  <%- end -%>
  <%- end -%>
  <%- end %>


  ### Finalize ###

  finalize:
    name: Finalize
    runs-on: ubuntu-22.04
    environment: Github releases
    permissions:
      contents: write
      checks: write
    needs:
      - determine_necessary_jobs
      - publish
      <%- distributions.each do |distribution| -%>
      <%- ruby_package_versions_for_distro(distribution).each do |ruby_package_version| -%>
      <%- variants.each do |variant| -%>
      - test_<%= slug(distribution[:name]) %>-<%= slug(ruby_package_version[:id]) %>-<%= slug(variant[:name]) %>
      <%- end -%>
      <%- end -%>
      <%- end -%>
    if: 'always()'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0


      ### Check whether dependent jobs failed ###
      # Only trigger next workflow if there are no failures.

      - name: Check whether 'Determine necessary jobs' succeeded
        run: 'false'
        if: needs.determine_necessary_jobs.result != 'success'

      <%- distributions.each do |distribution| -%>
      <%- ruby_package_versions_for_distro(distribution).each do |ruby_package_version| -%>
      <%- variants.each do |variant| -%>
      - name: Check whether 'Test [<%= distribution[:name] %>/<%= ruby_package_version[:id] %>/<%= variant[:name] %>]' did not fail
        run: 'false'
        if: |
          github.ref == 'refs/heads/main'
          && needs.test_<%= slug(distribution[:name]) %>-<%= slug(ruby_package_version[:id]) %>-<%= slug(variant[:name]) %>.result != 'success'
          && (needs.test_<%= slug(distribution[:name]) %>-<%= slug(ruby_package_version[:id]) %>-<%= slug(variant[:name]) %>.result != 'skipped'
            || contains(needs.determine_necessary_jobs.outputs.necessary_jobs, ';Test against production repo [<%= distribution[:name] %>/<%= ruby_package_version[:id] %>/<%= variant[:name] %>];'))
      <%- end -%>
      <%- end -%>
      <%- end -%>


      ### Create Git tag ###

      - name: Determine latest release version
        # Sets environment variable $LATEST_RELEASE_TAG
        run: ./internal-scripts/ci-cd/check-version-numbers-need-changing/determine-latest-release-tag.sh

      - name: Determine next epic version
        # Sets environment variable $NEXT_RELEASE_VERSION
        run: ./internal-scripts/ci-cd/create-git-tag/determine-next-epic-version.sh

      - name: Create Git tag
        run: git tag epic-${{ env.NEXT_RELEASE_VERSION }}

      - name: Push Git tag
        if: github.ref == 'refs/heads/main'
        run: git push origin epic-${{ env.NEXT_RELEASE_VERSION }}


      ### Update own check status ###

      - name: Mark check as 'success'
        uses: LouisBrunner/checks-action@3d24d4813a797720cc4e2080a50bdafb3373aef1
        if: 'github.event.inputs.check_id && success()'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          check_id: ${{ github.event.inputs.check_id }}
          conclusion: success

      - name: Mark check as 'failure'
        uses: LouisBrunner/checks-action@3d24d4813a797720cc4e2080a50bdafb3373aef1
        if: 'github.event.inputs.check_id && failure()'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          check_id: ${{ github.event.inputs.check_id }}
          conclusion: failure

      - name: Mark check as 'cancelled'
        uses: LouisBrunner/checks-action@3d24d4813a797720cc4e2080a50bdafb3373aef1
        if: 'github.event.inputs.check_id && cancelled()'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          check_id: ${{ github.event.inputs.check_id }}
          conclusion: cancelled
