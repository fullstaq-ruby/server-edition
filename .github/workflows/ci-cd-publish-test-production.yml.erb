<%= editing_warning_comment('ci-cd-publish-test-production') %>

name: 'CI/CD: publish & test against production repos'

on:
  workflow_call:
    inputs:
      ci_artifacts_run_number:
        required: true
        type: string
      necessary_jobs:
        required: true
        type: string

env:
  CI_ARTIFACTS_RUN_NUMBER: ${{ inputs.ci_artifacts_run_number || github.run_number }}

jobs:
  ### Publish ###

  publish:
    name: Publish packages
    runs-on: ubuntu-24.04
    environment: deploy
    timeout-minutes: 30
    permissions:
      id-token: write
      packages: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Clean disk space
        run: ./internal-scripts/ci-cd/publish/clean-disk-space.sh
      - uses: azure/login@v2
        with:
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      - uses: google-github-actions/auth@v2
        with:
          project_id: ${{ vars.GCLOUD_PROJECT_ID }}
          workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-deploy/providers/github-ci-deploy
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: '>= 363.0.0'
      - name: Login to Github Container Registry
        run: docker login ghcr.io -u ${{ github.actor }} --password-stdin <<<"$GITHUB_TOKEN"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download artifacts
        run: ./internal-scripts/ci-cd/download-artifacts.sh
        env:
          ARTIFACT_NAMES: |
            <%= common_deb_artifact_name %>
            <%= common_rpm_artifact_name %>
            <%= rbenv_deb_artifact_name %>
            <%= rbenv_rpm_artifact_name %>
            <%= ruby_package_artifact_names.join(' ') %>
          ARTIFACT_PATH: pkgs
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}

      - name: Download Docker image necessary for publishing
        run: ./internal-scripts/ci-cd/download-artifact.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          ARTIFACT_NAME: <%= docker_image_artifact_name('utility') %>
          ARTIFACT_PATH: .
          CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
      - name: Load Docker image necessary for publishing
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: contains(inputs.necessary_jobs, ';Use locally-built Docker image utility;')
        env:
          TARBALL: image.tar.zst
      - name: Install Aptly
        run: ./internal-scripts/ci-cd/publish/install-aptly.sh

      - name: Determine latest release tag
        # Sets environment variable $LATEST_RELEASE_TAG
        run: ./internal-scripts/ci-cd/check-version-numbers-need-changing/determine-latest-release-tag.sh

      - name: Upload DEBs to repo
        run: ./internal-scripts/ci-cd/publish/publish-debs.rb pkgs/*/*.deb
        env:
          PRODUCTION_REPO_BUCKET_NAME: fsruby-server-edition-apt-repo
          CI_ARTIFACTS_BUCKET_NAME: ${{ vars.CI_ARTIFACTS_BUCKET }}
          TESTING: false
          OVERWRITE_EXISTING: false
          DRY_RUN: ${{ github.ref != 'refs/heads/main' }}
          CLEANUP: true

      - name: Upload RPMs to repo
        run: ./internal-scripts/ci-cd/publish/publish-rpms.rb pkgs/*/*.rpm
        env:
          PRODUCTION_REPO_BUCKET_NAME: fsruby-server-edition-yum-repo
          CI_ARTIFACTS_BUCKET_NAME: ${{ vars.CI_ARTIFACTS_BUCKET }}
          TESTING: false
          OVERWRITE_EXISTING: false
          DRY_RUN: ${{ github.ref != 'refs/heads/main' }}

      - uses: actions/github-script@v7
        id: get-id-token
        if: github.ref == 'refs/heads/main'
        with:
          script: |
            const fs = require('fs');
            const token = await core.getIDToken('backend.fullstaqruby.org');
            fs.writeFileSync(
              process.env.GITHUB_OUTPUT,
              `id_token<<EOF\n${token}\nEOF\n`,
              { flag: 'a' }
            );

      - name: Restart web server
        run: ./internal-scripts/ci-cd/publish/restart-web-server.rb
        if: github.ref == 'refs/heads/main'
        env:
          ID_TOKEN: ${{ steps.get-id-token.outputs.id_token }}


  ### Run tests ###

  <%- distributions.each do |distribution| %>
  <%- ruby_package_versions_for_distro(distribution).each do |ruby_package_version| -%>
  <%- variants.each do |variant| -%>
  <%- unindent(2) do %>
    test_<%= slug(distribution[:name]) %>-<%= slug(ruby_package_version[:id]) %>-<%= slug(variant[:name]) %>:
      name: 'Test [<%= distribution[:name] %>/<%= ruby_package_version[:id] %>/<%= variant[:name] %>]'
      needs:
        - publish
      runs-on: ubuntu-22.04
      environment: test
      timeout-minutes: 30
      if: |
        github.ref == 'refs/heads/main'
        && contains(inputs.necessary_jobs, ';Test against production repo [<%= distribution[:name] %>/<%= ruby_package_version[:id] %>/<%= variant[:name] %>];')
      permissions:
        id-token: write
      steps:
        - uses: actions/checkout@v3
        - uses: google-github-actions/auth@v2
          with:
            project_id: ${{ vars.GCLOUD_PROJECT_ID }}
            workload_identity_provider: projects/${{ vars.GCLOUD_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-ci-test/providers/github-ci-test
        - name: Set up Cloud SDK
          uses: google-github-actions/setup-gcloud@v2
          with:
            version: '>= 363.0.0'

        - name: Run tests
          run: ./internal-scripts/ci-cd/test-packages/run-tests.sh
          env:
            DISTRIBUTION_NAME: "<%= distribution[:name] %>"
            RUBY_PACKAGE_ID: "<%= ruby_package_version[:id] %>"
            PACKAGE_FORMAT: "<%= distribution[:package_format] %>"
            VARIANT_NAME: "<%= variant[:name] %>"
            VARIANT_PACKAGE_SUFFIX: "<%= variant[:package_suffix] %>"
            TEST_IMAGE_NAME: "<%= distribution[:test_image] %>"
            APT_REPO_URL: https://apt.fullstaqruby.org
            YUM_REPO_URL: https://yum.fullstaqruby.org

        - name: Create mark file
          run: mkdir mark-<%= variant[:name] %> && touch mark-<%= variant[:name] %>/done.txt
        - name: Mark job as done
          run: ./internal-scripts/ci-cd/upload-artifact.sh
          env:
            ARTIFACT_NAME: tested-against-production-<%= distribution[:name] %>_<%= ruby_package_version[:id] %>_<%= variant[:name] %>
            ARTIFACT_PATH: mark-<%= variant[:name] %>
            CI_ARTIFACTS_BUCKET: ${{ vars.CI_ARTIFACTS_BUCKET }}
  <%- end -%>
  <%- end -%>
  <%- end -%>
  <%- end %>


  ### Finalize ###

  finalize:
    name: Finalize
    environment: Github releases
    permissions:
      id-token: write
      contents: write
    needs:
      - publish
      <%- distributions.each do |distribution| -%>
      <%- ruby_package_versions_for_distro(distribution).each do |ruby_package_version| -%>
      <%- variants.each do |variant| -%>
      - test_<%= slug(distribution[:name]) %>-<%= slug(ruby_package_version[:id]) %>-<%= slug(variant[:name]) %>
      <%- end -%>
      <%- end -%>
      <%- end -%>
    runs-on: ubuntu-24.04
    if: 'always()'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0


      ### Check whether dependent jobs failed ###

      - name: Check whether 'Publish packages' succeeded
        run: 'false'
        if: needs.publish.result != 'success'

      <%- distributions.each do |distribution| -%>
      <%- ruby_package_versions_for_distro(distribution).each do |ruby_package_version| -%>
      <%- variants.each do |variant| -%>
      - name: Check whether 'Test [<%= distribution[:name] %>/<%= ruby_package_version[:id] %>/<%= variant[:name] %>]' did not fail
        run: 'false'
        if: |
          github.ref == 'refs/heads/main'
          && needs.test_<%= slug(distribution[:name]) %>-<%= slug(ruby_package_version[:id]) %>-<%= slug(variant[:name]) %>.result != 'success'
          && (needs.test_<%= slug(distribution[:name]) %>-<%= slug(ruby_package_version[:id]) %>-<%= slug(variant[:name]) %>.result != 'skipped'
            || contains(inputs.necessary_jobs, ';Test against production repo [<%= distribution[:name] %>/<%= ruby_package_version[:id] %>/<%= variant[:name] %>];'))
      <%- end -%>
      <%- end -%>
      <%- end -%>


      ### Create Git tag ###

      - name: Determine latest release version
        # Sets environment variable $LATEST_RELEASE_TAG
        run: ./internal-scripts/ci-cd/check-version-numbers-need-changing/determine-latest-release-tag.sh

      - name: Determine next epic version
        # Sets environment variable $NEXT_RELEASE_VERSION
        run: ./internal-scripts/ci-cd/create-git-tag/determine-next-epic-version.sh

      - name: Create Git tag
        run: git tag epic-${{ env.NEXT_RELEASE_VERSION }}

      - name: Push Git tag
        if: github.ref == 'refs/heads/main'
        run: git push origin epic-${{ env.NEXT_RELEASE_VERSION }}
