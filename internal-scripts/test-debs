#!/bin/bash
set -e
set -o pipefail

SELFDIR=$(dirname "$0")
SELFDIR=$(cd "$SELFDIR" && pwd)
# shellcheck source=lib/library.sh
source "$SELFDIR/../lib/library.sh"


header "Installing packages"
ESSENTIAL_PACKAGES=(perl sudo binutils)

if [[ "$SERVER" = "" ]]; then
    echo "+ Create /etc/apt/sources.list.d/local.list"
    echo "deb [allow-insecure=yes] file:$REPO_PATH test main" > /etc/apt/sources.list.d/local.list
    cat /etc/apt/sources.list.d/local.list
    run apt update
    run apt install -y "${ESSENTIAL_PACKAGES[@]}"

    echo "+ dpkg-deb -I" /input/repo/pool/main/f/fullstaq-ruby-[0-9]*/*.deb
    DEB_INFO=$(dpkg-deb -I /input/repo/pool/main/f/fullstaq-ruby-[0-9]*/*.deb)
    RUBY_PACKAGE_VERSION=$(grep '^  Package version with variant suffix:' <<<"$DEB_INFO" | perl -pe 's/.*?: *//')
    RUBY_PACKAGE_VERSION_WITHOUT_VARIANT_SUFFIX=$(grep '^  Package version without variant suffix:' <<<"$DEB_INFO" | perl -pe 's/.*?: *//')
    VARIANT=$(grep '^  Variant:' <<<"$DEB_INFO" | perl -pe 's/.*?: *//')
    echo "+ Detected package version (possibly with variant suffix): $RUBY_PACKAGE_VERSION"
    echo "+ Detected package version (without variant suffix): $RUBY_PACKAGE_VERSION_WITHOUT_VARIANT_SUFFIX"
    echo "+ Detected variant: $VARIANT"

    run apt install -y --allow-unauthenticated "fullstaq-ruby-$RUBY_PACKAGE_VERSION" fullstaq-ruby-common
else
    run apt update
    run apt install -y "${ESSENTIAL_PACKAGES[@]}" gnupg apt-transport-https ca-certificates
    run apt-key add /system/fullstaq-ruby.asc
    echo "+ Create /etc/apt/sources.list.d/server.list"
    echo "deb $SERVER $APT_DISTRO_NAME main" > /etc/apt/sources.list.d/server.list
    cat /etc/apt/sources.list.d/server.list
    run apt update

    echo "+ apt-cache show --no-all-versions fullstaq-ruby-$RUBY_PACKAGE_VERSION"
    DEB_INFO=$(apt-cache show --no-all-versions "fullstaq-ruby-$RUBY_PACKAGE_VERSION")
    RUBY_PACKAGE_VERSION_WITHOUT_VARIANT_SUFFIX=$(grep '^ Package version without variant suffix:' <<<"$DEB_INFO" | perl -pe 's/.*?: *//')
    VARIANT=$(grep '^ Variant:' <<<"$DEB_INFO" | perl -pe 's/.*?: *//')
    echo "+ Detected package version (possibly with variant suffix): $RUBY_PACKAGE_VERSION"
    echo "+ Detected package version (without variant suffix): $RUBY_PACKAGE_VERSION_WITHOUT_VARIANT_SUFFIX"
    echo "+ Detected variant: $VARIANT"

    run apt install -y fullstaq-ruby-"$RUBY_PACKAGE_VERSION" fullstaq-ruby-common
fi

echo


header "Setting up"
run addgroup --gid 9999 utility
run adduser --uid 9999 --gid 9999 --disabled-password --gecos Utility utility
run usermod -L utility
echo "+ Loading Rbenv environment"
eval "$(rbenv init -)"
run rbenv global "$RUBY_PACKAGE_VERSION"
run sudo -u utility -H rbenv global "$RUBY_PACKAGE_VERSION"
echo


header "Basic checks"

function assert_equals()
{
    local real="$1"
    local expected="$2"
    if [[ "$real" == "$expected" ]]; then
        echo yes
    else
        echo no
        echo "  Expected: $expected"
        echo "  Actual  : $real"
        return 1
    fi
}

echo -n "Checking whether variant is $EXPECTED_VARIANT... "
assert_equals "$VARIANT" "$EXPECTED_VARIANT"

echo -n "Checking whether Rbenv is in /usr/bin/rbenv... "
output=$(which rbenv)
assert_equals "$output" /usr/bin/rbenv

echo -n "Checking whether Fullstaq Ruby $RUBY_PACKAGE_VERSION is in /usr/lib/fullstaq-ruby/versions/$RUBY_PACKAGE_VERSION... "
if [[ -e "/usr/lib/fullstaq-ruby/versions/$RUBY_PACKAGE_VERSION/bin/ruby" ]]; then
    echo yes
else
    echo no
    exit 1
fi

echo -n "Checking whether active Ruby for root is /usr/lib/rbenv/versions/$RUBY_PACKAGE_VERSION/bin/ruby... "
output=$(rbenv which ruby)
assert_equals "$output" "/usr/lib/rbenv/versions/$RUBY_PACKAGE_VERSION/bin/ruby"

echo -n "Checking whether the package version contains the proper variant suffix... "
if [[ "$VARIANT" = normal ]]; then
    if [[ ! "$RUBY_PACKAGE_VERSION" =~ - ]]; then
        echo yes
    else
        echo no
        echo "  '$RUBY_PACKAGE_VERSION' contains a dash, so it is presumed to contain a variant suffix."
        exit 1
    fi
elif [[ "$VARIANT" = jemalloc ]]; then
    if [[ "$RUBY_PACKAGE_VERSION" =~ -jemalloc$ ]]; then
        echo yes
    else
        echo no
        echo "  Expected '$RUBY_PACKAGE_VERSION' to end with '-jemalloc'."
        exit 1
    fi
elif [[ "$VARIANT" = malloctrim ]]; then
    if [[ "$RUBY_PACKAGE_VERSION" =~ -malloctrim$ ]]; then
        echo yes
    else
        echo no
        echo "  Expected '$RUBY_PACKAGE_VERSION' to end with '-malloctrim'."
        exit 1
    fi
else
    echo "BUG: unsupported variant $VARIANT" >&2
    exit 1
fi

echo -n "Checking whether active Ruby for utility is /usr/lib/rbenv/versions/$RUBY_PACKAGE_VERSION/bin/ruby... "
output=$(sudo -u utility -H bash -c 'eval "$(rbenv init -)" && rbenv which ruby')
assert_equals "$output" "/usr/lib/rbenv/versions/$RUBY_PACKAGE_VERSION/bin/ruby"

echo -n "Checking whether Ruby works... "
output=$(ruby -e 'puts "hello world"')
assert_equals "$output" "hello world"

echo -n "Checking whether Ruby native libraries work... "
output=$(ruby -rbigdecimal -e "puts BigDecimal(0)")
assert_equals "$output" "0.0"

echo -n "Checking whether irb works... "
output=$(irb <<<'puts "hello world"')
if [[ "$output" =~ "hello world" ]]; then
    echo yes
else
    echo no
    exit 1
fi

# https://github.com/fullstaq-ruby/server-edition/issues/101
echo -n "Checking whether Ruby has detected mkdir in /bin... "
output=$(ruby -rrbconfig -e 'puts RbConfig::CONFIG["MAKEDIRS"]')
assert_equals "$output" "/bin/mkdir -p"

echo -n "Checking whether Ruby has detected install in /usr/bin... "
output=$(ruby -rrbconfig -e 'puts RbConfig::CONFIG["INSTALL_PROGRAM"]')
assert_equals "$output" "/usr/bin/install -c"

echo -n "Checking whether Ruby has detected grep in /bin... "
output=$(ruby -rrbconfig -e 'puts RbConfig::CONFIG["GREP"]')
assert_equals "$output" "/bin/grep"

echo -n "Checking whether gem works... "
output=$(gem env)
if grep -Fq "RUBY VERSION: $RUBY_PACKAGE_VERSION_WITHOUT_VARIANT_SUFFIX" <<<"$output"; then
    echo yes
else
    echo no
    echo "  Expected 'gem env' output to contain 'RUBY VERSION: $RUBY_PACKAGE_VERSION_WITHOUT_VARIANT_SUFFIX'"
    exit 1
fi

if [[ "$VARIANT" = jemalloc ]]; then
    echo -n "Checking whether Jemalloc library exists... "
    if [[ -e "/usr/lib/rbenv/versions/$RUBY_PACKAGE_VERSION/lib/libjemalloc.so" ]]; then
        echo yes
    else
        echo no
        exit 1
    fi

    echo -n "Checking whether Ruby is linked to Jemalloc... "
    output=$(objdump -p "/usr/lib/rbenv/versions/$RUBY_PACKAGE_VERSION/lib/libruby.so")
    if grep NEEDED <<<"$output" | grep -q libjemalloc.so; then
        echo yes
    else
        echo no
        exit 1
    fi

    echo -n "Checking whether 'ruby -v' mentions Jemalloc... "
    output=$(ruby -v)
    if grep -qF '+jemalloc' <<<"$output"; then
        echo yes
    else
        echo no
        exit 1
    fi

    echo -n "Checking whether jemalloc.so is a symlink... "
    if [[ -h "/usr/lib/rbenv/versions/$RUBY_PACKAGE_VERSION/lib/libjemalloc.so" ]]; then
        echo yes
    else
        echo no
        exit 1
    fi
else
    echo -n "Checking whether Jemalloc library does not exist... "
    if [[ ! -e "/usr/lib/rbenv/versions/$RUBY_PACKAGE_VERSION/lib/libjemalloc.so" ]]; then
        echo yes
    else
        echo no
        exit 1
    fi

    echo -n "Checking whether Ruby is not linked to Jemalloc... "
    output=$(objdump -p "/usr/lib/rbenv/versions/$RUBY_PACKAGE_VERSION/lib/libruby.so")
    if ! grep NEEDED <<<"$output" | grep -q libjemalloc.so; then
        echo yes
    else
        echo no
        exit 1
    fi

    if [[ "$VARIANT" = malloctrim ]]; then
        echo -n "Checking whether 'ruby -v' mentions malloctrim... "
        output=$(ruby -v)
        if grep -qF '+malloctrim' <<<"$output"; then
            echo yes
        else
            echo no
            exit 1
        fi
    fi
fi

echo -n "Checking whether package contains no static libraries... "
shopt -s nullglob
static_libs=("/usr/lib/rbenv/versions/$RUBY_PACKAGE_VERSION/lib"/*.a)
shopt -u nullglob
if [[ "${#static_libs[@]}" -eq 0 ]]; then
    echo ok
else
    echo error
    echo "The following static libraries were found:"
    for F in "${static_libs[@]}"; do
        echo " - $F"
    done
    exit 1
fi

echo


header "Test installing gems"

BUNDLER_VERSION=$(grep -A 1 'BUNDLED WITH' /system/resources/test-env/Gemfile.lock | tail -n 1 | awk '{ print $1 }')
echo "+ resources/test-env/Gemfile.lock was bundled with Bundler version $BUNDLER_VERSION"

run apt install -y build-essential
run gem install bundler -v "$BUNDLER_VERSION" --no-document
run sudo -u utility -H cp /system/resources/test-env/Gemfile* ~utility/
run sudo -u utility -H env BUNDLE_GEMFILE=/home/utility/Gemfile \
    rbenv exec bundle config set --local path /home/utility/bundle
run sudo -u utility -H env BUNDLE_GEMFILE=/home/utility/Gemfile \
    rbenv exec bundle config set --local jobs 4
run sudo -u utility -H env BUNDLE_GEMFILE=/home/utility/Gemfile \
    rbenv exec bundle install
run sudo -u utility -H env BUNDLE_GEMFILE=/home/utility/Gemfile \
    rbenv exec bundle exec rspec --version
echo


if [[ "$VARIANT" = jemalloc ]]; then
    # https://github.com/fullstaq-labs/fullstaq-ruby-server-edition/issues/34
    # https://github.com/fullstaq-labs/fullstaq-ruby-server-edition/pull/32#issuecomment-554764548
    header "Test Jemalloc C++ compatibility"
    INCLUDE_DIR=$(ruby -rrbconfig -e 'puts RbConfig::CONFIG["rubyhdrdir"]')
    run c++ "-I$INCLUDE_DIR" -Wall /system/resources/test-env/jemalloc-cxx.cpp -o /tmp/jemalloc_cxx
fi


echo
echo "All tests pass."
