#!/bin/bash
set -e

SELFDIR=$(dirname "$0")
SELFDIR=$(cd "$SELFDIR" && pwd)
# shellcheck source=lib/library.sh
source "$SELFDIR/lib/library.sh"

ENVIRONMENT_NAME=
SOURCE_PATH=
PACKAGE_VERSION=
OUTPUT_PATH=
VARIANT=normal
JEMALLOC_BIN_PATH=
BUILD_CONCURRENCY=1
CACHE_CONNECTION_STRING_FILE=
CACHE_CONTAINER=
CACHE_KEY_PREFIX=

function usage()
{
    echo "Usage: ./build-ruby <OPTIONS>"
    echo "Build a Ruby binary tarball from its source tarball."
    echo
    echo "Required options:"
    echo "  -n NAME      Name of environment to build in (one of: $(list_environment_names "$SELFDIR/environments"))"
    echo "  -s PATH      Path to Ruby source tarball"
    echo "  -v VERSION   Package version number"
    echo "  -o PATH      Path to output tarball"
    echo
    echo "Build variant (pick at most one):"
    echo "  -m PATH      Build with Jemalloc support, using this Jemalloc binary tarball (as built by ./build-jemalloc)"
    echo "  -t           Build with malloc_trim support"
    echo
    echo "Optional options:"
    echo "  -j NUM       Build concurrency (default: $BUILD_CONCURRENCY)"
    echo "  -c PATH      Cache to Azure Blob Storage, use connection string in given file"
    echo "  -r CONTAINER Use given Azure Blob Storage container"
    echo "  -d NAME      Use given Azure Blob Storage key prefix"
    echo "  -h           Show usage"
}

function parse_options()
{
    local OPTIND=1
    local opt
    while getopts "n:s:v:o:m:tj:c:r:d:h" opt; do
        case "$opt" in
        n)
            ENVIRONMENT_NAME="$OPTARG"
            ;;
        s)
            SOURCE_PATH=$(absolute_path "$OPTARG")
            ;;
        v)
            PACKAGE_VERSION="$OPTARG"
            ;;
        o)
            OUTPUT_PATH=$(absolute_path "$OPTARG")
            ;;
        m)
            VARIANT=jemalloc
            JEMALLOC_BIN_PATH=$(absolute_path "$OPTARG")
            ;;
        t)
            VARIANT=malloctrim
            ;;
        j)
            BUILD_CONCURRENCY="$OPTARG"
            ;;
        c)
            CACHE_CONNECTION_STRING_FILE=$(absolute_path "$OPTARG")
            ;;
        r)
            CACHE_CONTAINER="$OPTARG"
            ;;
        d)
            CACHE_KEY_PREFIX="$OPTARG"
            ;;
        h)
            usage
            exit
            ;;
        *)
            return 1
            ;;
        esac
    done

    (( OPTIND -= 1 )) || true
    shift $OPTIND || true

    if [[ "$ENVIRONMENT_NAME" = "" ]]; then
        echo 'ERROR: please specify an environment name with -n.' >&2
        exit 1
    fi
    if [[ "$SOURCE_PATH" = "" ]]; then
        echo 'ERROR: please specify a Ruby source tarball path with -s.' >&2
        exit 1
    fi
    if [[ ! -e "$SOURCE_PATH" ]]; then
        echo "ERROR: $SOURCE_PATH does not exist." >&2
        exit 1
    fi
    if [[ "$PACKAGE_VERSION" = "" ]]; then
        echo 'ERROR: please specify a package version number with -v.' >&2
        exit 1
    fi
    if [[ "$VARIANT" = jemalloc ]]; then
        if [[ "$JEMALLOC_BIN_PATH" = "" ]]; then
            echo 'ERROR: please specify a Jemalloc binary tarball path with -m.' >&2
            exit 1
        fi
        if [[ "$JEMALLOC_BIN_PATH" != "" && ! -e "$JEMALLOC_BIN_PATH" ]]; then
            echo "ERROR: $JEMALLOC_BIN_PATH does not exist." >&2
            exit 1
        fi
    fi
    if [[ "$OUTPUT_PATH" = "" ]]; then
        echo 'ERROR: please specify an output tarball path with -o.' >&2
        exit 1
    fi
    if [[ -n "$CACHE_CONNECTION_STRING_FILE" && -z "$CACHE_CONTAINER" ]]; then
        echo "ERROR: if a cache connection string file is given, then an Azure Blob Storage container name must also be given." >&2
        exit 1
    fi
}

parse_options "$@"

if tty -s; then
    TTY_ARGS=(-t -i)
else
    TTY_ARGS=()
fi
MOUNT_ARGS=()
if [[ "$VARIANT" = jemalloc ]]; then
    MOUNT_ARGS+=(-v "$JEMALLOC_BIN_PATH:/input/jemalloc-bin.tar.gz:ro")
fi
if [[ -n "$CACHE_CONNECTION_STRING_FILE" ]]; then
    MOUNT_ARGS+=(-v "$CACHE_CONNECTION_STRING_FILE:/azure-connection-string.txt:ro")
fi

IMAGE_VERSION=$(read_single_value_file "$SELFDIR/environments/$ENVIRONMENT_NAME/image_tag")
OUTPUT_TEMP_PATH=$(mktemp "$OUTPUT_PATH.XXXXXX")
create_file_if_missing "$OUTPUT_TEMP_PATH"

echo '--- Entering Docker container ---'

function _cleanup() {
    echo
    echo '--- Exited Docker container ---'
    run rm -f "$OUTPUT_TEMP_PATH"
}

verbose_run docker run --rm --init "${TTY_ARGS[@]}" \
    -v "$SELFDIR:/system:ro" \
    -v "$SOURCE_PATH:/input/ruby-src.tar.gz:ro" \
    -v "$OUTPUT_TEMP_PATH:/output/ruby-bin.tar.gz" \
    "${MOUNT_ARGS[@]}" \
    -e "VARIANT=$VARIANT" \
    -e "BUILD_CONCURRENCY=$BUILD_CONCURRENCY" \
    -e "PACKAGE_VERSION=$PACKAGE_VERSION" \
    -e "ENVIRONMENT_NAME=$ENVIRONMENT_NAME" \
    -e "CACHE_CONTAINER=$CACHE_CONTAINER" \
    -e "CACHE_KEY_PREFIX=$CACHE_KEY_PREFIX" \
    --user "$(id -u):$(id -g)" \
    "fullstaq/ruby-build-env-$ENVIRONMENT_NAME:$IMAGE_VERSION" \
    /system/container-entrypoints/build-ruby

function _cleanup() {
    echo '--- Exited Docker container ---'
    run mv "$OUTPUT_TEMP_PATH" "$OUTPUT_PATH"
}
