require 'yaml'
require 'json'
require_relative 'build_all_packages_support'

module CiWorkflowSupport
  # Make instance methods available as class methods
  extend self

  def indentyaml(object)
    # Change symbols to strings
    object = JSON.parse(JSON.dump(object))

    str = YAML.dump(object)
    str.sub!(/^---\n/, '')

    indent = ' ' * 10
    lines = str.split("\n")
    lines.map! { |line| indent + line }
    "\n" + lines.join("\n")
  end

  def capture
    pos = @erb_out.size
    yield
    @erb_out.slice!(pos..@erb_out.size)
  end


  def editing_warning_comment(source)
    "# WARNING: DO NOT EDIT THIS FILE!!!\n" \
    "#\n" \
    "# This file is autogenerated from .github/workflows/#{source}.yml.erb\n" \
    "# by ./internal-scripts/generate-ci-cd-yaml.rb.\n" \
    "# Please edit the .erb file instead, then regenerate YAML\n" \
    "# by running that script.\n" \
    "#\n" \
    "# TIP: run this on your development machine to ensure generate-ci-cd-yaml.rb\n" \
    "# is run automatically as a Git pre-commit hook:\n" \
    "#\n" \
    "#   git config core.hooksPath .githooks"
  end


  def docker_images
    Dir["#{Support::ROOT}/environments/*"].find_all do |path|
      File.exist?("#{path}/Dockerfile")
    end.sort.map do |path|
      id = File.basename(path)
      {
        name: "fullstaq/ruby-build-env-#{id}",
        id: id,
        tag: read_single_value_file("#{path}/image_tag")
      }
    end
  end

  def docker_image_artifact_name(distribution_name)
    "docker-image-#{distribution_name}"
  end

  def ruby_source_artifact_name(ruby_version)
    "ruby-src-#{ruby_version}"
  end

  def rbenv_source_artifact_name
    'rbenv-src'
  end

  def common_deb_artifact_name
    'common-deb'
  end

  def common_rpm_artifact_name
    'common-rpm'
  end

  def rbenv_deb_artifact_name
    'rbenv-deb'
  end

  def rbenv_rpm_artifact_name
    'rbenv-rpm'
  end

  def ruby_package_artifact_name(ruby_package_version, distribution, variant)
    "ruby-pkg_#{ruby_package_version[:id]}_#{distribution[:name]}_#{variant[:name]}"
  end

  def ruby_package_artifact_names
    result = []
    Support.ruby_package_versions.each do |ruby_package_version|
      Support.distributions.each do |distribution|
        Support.variants.each do |variant|
          result << ruby_package_artifact_name(ruby_package_version, distribution, variant)
        end
      end
    end
    result
  end
end
